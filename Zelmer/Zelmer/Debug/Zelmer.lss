
Zelmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000079a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000080e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  0000080e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a20  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000809  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000021fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b1  00000000  00000000  00002842  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002bf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	c7 c0       	rjmp	.+398    	; 0x192 <__vector_1>
   4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	45 c1       	rjmp	.+650    	; 0x294 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	d2 c0       	rjmp	.+420    	; 0x1ce <__vector_20>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a9 36       	cpi	r26, 0x69	; 105
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	a8 c3       	rjmp	.+1872   	; 0x796 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:



int main(void)
{	
	Output_Pins_Init();
  48:	ff d1       	rcall	.+1022   	; 0x448 <Output_Pins_Init>
	SET_LED5;// set LED
  4a:	82 b3       	in	r24, 0x12	; 18
  4c:	8f 7b       	andi	r24, 0xBF	; 191
  4e:	82 bb       	out	0x12, r24	; 18
	SET_LED6;// set LED
  50:	82 b3       	in	r24, 0x12	; 18
  52:	8f 7e       	andi	r24, 0xEF	; 239
  54:	82 bb       	out	0x12, r24	; 18
	Input_Pins_Init();
  56:	2f d2       	rcall	.+1118   	; 0x4b6 <Input_Pins_Init>
	Timer0_Init();
  58:	65 d2       	rcall	.+1226   	; 0x524 <Timer0_Init>
	Timer1_Init();
  5a:	69 d2       	rcall	.+1234   	; 0x52e <Timer1_Init>
	sei();//enable global interrupts
  5c:	78 94       	sei
	Soft_Start_and_Run_to_Max();
  5e:	bf d1       	rcall	.+894    	; 0x3de <Soft_Start_and_Run_to_Max>
	RESET_LED5;// set LED
  60:	82 b3       	in	r24, 0x12	; 18
  62:	80 64       	ori	r24, 0x40	; 64
  64:	82 bb       	out	0x12, r24	; 18
	RESET_LED6;// set LED
  66:	82 b3       	in	r24, 0x12	; 18
  68:	80 61       	ori	r24, 0x10	; 16
  6a:	82 bb       	out	0x12, r24	; 18

    while (1) 
    {
		if((increment_flag_LED==true) && (decrement_flag_LED==false) && (!(PIND&(1<<PIND2)))){
  6c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <increment_flag_LED>
  70:	88 23       	and	r24, r24
  72:	39 f1       	breq	.+78     	; 0xc2 <__DATA_REGION_LENGTH__+0x42>
  74:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <decrement_flag_LED>
  78:	81 11       	cpse	r24, r1
  7a:	23 c0       	rjmp	.+70     	; 0xc2 <__DATA_REGION_LENGTH__+0x42>
  7c:	82 99       	sbic	0x10, 2	; 16
  7e:	21 c0       	rjmp	.+66     	; 0xc2 <__DATA_REGION_LENGTH__+0x42>
			while((uint8_t)1==Delay_ms(100,(PIND&(1<<PIND2)))){}
  80:	60 b3       	in	r22, 0x10	; 16
  82:	64 70       	andi	r22, 0x04	; 4
  84:	84 e6       	ldi	r24, 0x64	; 100
  86:	32 d1       	rcall	.+612    	; 0x2ec <Delay_ms>
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	d1 f3       	breq	.-12     	; 0x80 <__DATA_REGION_LENGTH__>
				TRIACdelay=(uint16_t)(OCR1A-DELAYCNTRL);
  8c:	8a b5       	in	r24, 0x2a	; 42
  8e:	9b b5       	in	r25, 0x2b	; 43
  90:	80 54       	subi	r24, 0x40	; 64
  92:	96 40       	sbci	r25, 0x06	; 6
  94:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <TRIACdelay+0x1>
  98:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <TRIACdelay>
				if(TRIACdelay<DELAYMIN){
  9c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TRIACdelay>
  a0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TRIACdelay+0x1>
  a4:	88 35       	cpi	r24, 0x58	; 88
  a6:	92 40       	sbci	r25, 0x02	; 2
  a8:	20 f4       	brcc	.+8      	; 0xb2 <__DATA_REGION_LENGTH__+0x32>
					set_power_max=true;	
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <set_power_max>
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <__DATA_REGION_LENGTH__+0x38>
				}
				else{
					increment_flag=true;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <increment_flag>
				}
				increment_flag_LED=false;
  b8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <increment_flag_LED>
				Increment_decrement_LED(INCREMENT);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	2f d1       	rcall	.+606    	; 0x31e <Increment_decrement_LED>
  c0:	2f c0       	rjmp	.+94     	; 0x120 <__stack+0x41>
			}
		else if((decrement_flag_LED==true) && (increment_flag_LED==false) && (!(PIND&(1<<PIND3)))){
  c2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <decrement_flag_LED>
  c6:	88 23       	and	r24, r24
  c8:	59 f1       	breq	.+86     	; 0x120 <__stack+0x41>
  ca:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <increment_flag_LED>
  ce:	81 11       	cpse	r24, r1
  d0:	27 c0       	rjmp	.+78     	; 0x120 <__stack+0x41>
  d2:	83 99       	sbic	0x10, 3	; 16
  d4:	25 c0       	rjmp	.+74     	; 0x120 <__stack+0x41>
			while((uint8_t)1==Delay_ms(100,(PIND&(1<<PIND3)))){}
  d6:	60 b3       	in	r22, 0x10	; 16
  d8:	68 70       	andi	r22, 0x08	; 8
  da:	84 e6       	ldi	r24, 0x64	; 100
  dc:	07 d1       	rcall	.+526    	; 0x2ec <Delay_ms>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	d1 f3       	breq	.-12     	; 0xd6 <__DATA_REGION_LENGTH__+0x56>
			if(set_power_max==true){
  e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <set_power_max>
  e6:	88 23       	and	r24, r24
  e8:	39 f0       	breq	.+14     	; 0xf8 <__stack+0x19>
				set_power_max=false;
  ea:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <set_power_max>
				decrement_flag_LED=false;
  ee:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <decrement_flag_LED>
				Increment_decrement_LED(DECREMENT);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	14 d1       	rcall	.+552    	; 0x31e <Increment_decrement_LED>
  f6:	14 c0       	rjmp	.+40     	; 0x120 <__stack+0x41>
			}
			else{	
				TRIACdelay+=(uint16_t)(DELAYCNTRL+OCR1A);
  f8:	8a b5       	in	r24, 0x2a	; 42
  fa:	9b b5       	in	r25, 0x2b	; 43
  fc:	80 5c       	subi	r24, 0xC0	; 192
  fe:	99 4f       	sbci	r25, 0xF9	; 249
 100:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <TRIACdelay>
 104:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <TRIACdelay+0x1>
 108:	82 0f       	add	r24, r18
 10a:	93 1f       	adc	r25, r19
 10c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <TRIACdelay+0x1>
 110:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <TRIACdelay>
				decrement_flag=true;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <decrement_flag>
				decrement_flag_LED=false;
 11a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <decrement_flag_LED>
				Increment_decrement_LED(DECREMENT);
 11e:	ff d0       	rcall	.+510    	; 0x31e <Increment_decrement_LED>
			}
		}
		if(!(PINA&(1<<PINA1))){
 120:	c9 99       	sbic	0x19, 1	; 25
 122:	04 c0       	rjmp	.+8      	; 0x12c <__stack+0x4d>
				SET_LED5;// set LED
 124:	82 b3       	in	r24, 0x12	; 18
 126:	8f 7b       	andi	r24, 0xBF	; 191
 128:	82 bb       	out	0x12, r24	; 18
 12a:	03 c0       	rjmp	.+6      	; 0x132 <__stack+0x53>
		}
		else{
			RESET_LED5;// reset LED
 12c:	82 b3       	in	r24, 0x12	; 18
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	82 bb       	out	0x12, r24	; 18
		}
		if(!(PIND&(1<<PIND1))){
 132:	81 99       	sbic	0x10, 1	; 16
 134:	04 c0       	rjmp	.+8      	; 0x13e <__stack+0x5f>
			SET_LED6;// set LED
 136:	82 b3       	in	r24, 0x12	; 18
 138:	8f 7e       	andi	r24, 0xEF	; 239
 13a:	82 bb       	out	0x12, r24	; 18
 13c:	03 c0       	rjmp	.+6      	; 0x144 <__stack+0x65>
		}
		else{
			RESET_LED6;// reset LED
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	80 61       	ori	r24, 0x10	; 16
 142:	82 bb       	out	0x12, r24	; 18
		}
		if(!(PINA&(1<<PINA0))){
 144:	c8 99       	sbic	0x19, 0	; 25
 146:	04 c0       	rjmp	.+8      	; 0x150 <__stack+0x71>
			SET_SOCKET;// reset socket
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	8f 77       	andi	r24, 0x7F	; 127
 14c:	88 bb       	out	0x18, r24	; 24
 14e:	8e cf       	rjmp	.-228    	; 0x6c <main+0x24>
		}
		else{
			 RESET_SOCKET;// reset socket
 150:	88 b3       	in	r24, 0x18	; 24
 152:	80 68       	ori	r24, 0x80	; 128
 154:	88 bb       	out	0x18, r24	; 24
 156:	8a cf       	rjmp	.-236    	; 0x6c <main+0x24>

00000158 <Short_Pulse>:
volatile uint16_t TRIACdelay;
volatile bool SoftStart=false, set_power_max=false;
volatile uint8_t LED=0;


 void Short_Pulse(void){	
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	00 d0       	rcall	.+0      	; 0x15e <Short_Pulse+0x6>
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	dd 27       	eor	r29, r29
	volatile uint16_t delay=10;
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	89 83       	std	Y+1, r24	; 0x01
	RESET_TMR1OUT0;
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	88 bb       	out	0x18, r24	; 24
	while(delay--){}
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	9c 01       	movw	r18, r24
 176:	21 50       	subi	r18, 0x01	; 1
 178:	31 09       	sbc	r19, r1
 17a:	3a 83       	std	Y+2, r19	; 0x02
 17c:	29 83       	std	Y+1, r18	; 0x01
 17e:	89 2b       	or	r24, r25
 180:	b9 f7       	brne	.-18     	; 0x170 <Short_Pulse+0x18>
	SET_TMR1OUT0;
 182:	88 b3       	in	r24, 0x18	; 24
 184:	80 61       	ori	r24, 0x10	; 16
 186:	88 bb       	out	0x18, r24	; 24
}
 188:	ce 5f       	subi	r28, 0xFE	; 254
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <__vector_1>:

ISR(INT0_vect){
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
	increment_flag_LED=true;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <increment_flag_LED>
}
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_2>:

ISR(INT1_vect){
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
	decrement_flag_LED=true;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <decrement_flag_LED>
}
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_20>:

ISR(PCINT2_vect){
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	if(SoftStart==true){
 1f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SoftStart>
 1f4:	88 23       	and	r24, r24
 1f6:	39 f0       	breq	.+14     	; 0x206 <__vector_20+0x38>
		OCR1A = TRIACdelay;// set delay time;
 1f8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TRIACdelay>
 1fc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TRIACdelay+0x1>
 200:	9b bd       	out	0x2b, r25	; 43
 202:	8a bd       	out	0x2a, r24	; 42
 204:	35 c0       	rjmp	.+106    	; 0x270 <__vector_20+0xa2>
	}
	else if (increment_flag==true){
 206:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <increment_flag>
 20a:	88 23       	and	r24, r24
 20c:	b9 f0       	breq	.+46     	; 0x23c <__vector_20+0x6e>
			if((OCR1A>DELAYMIN)&&(OCR1A>TRIACdelay)){
 20e:	8a b5       	in	r24, 0x2a	; 42
 210:	9b b5       	in	r25, 0x2b	; 43
 212:	89 35       	cpi	r24, 0x59	; 89
 214:	92 40       	sbci	r25, 0x02	; 2
 216:	78 f0       	brcs	.+30     	; 0x236 <__vector_20+0x68>
 218:	2a b5       	in	r18, 0x2a	; 42
 21a:	3b b5       	in	r19, 0x2b	; 43
 21c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TRIACdelay>
 220:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TRIACdelay+0x1>
 224:	82 17       	cp	r24, r18
 226:	93 07       	cpc	r25, r19
 228:	30 f4       	brcc	.+12     	; 0x236 <__vector_20+0x68>
				OCR1A -=DELAYCNTRLSOFTTRANSITION;
 22a:	8a b5       	in	r24, 0x2a	; 42
 22c:	9b b5       	in	r25, 0x2b	; 43
 22e:	0a 97       	sbiw	r24, 0x0a	; 10
 230:	9b bd       	out	0x2b, r25	; 43
 232:	8a bd       	out	0x2a, r24	; 42
 234:	1d c0       	rjmp	.+58     	; 0x270 <__vector_20+0xa2>
			}
			else{
				increment_flag=false;
 236:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <increment_flag>
 23a:	1a c0       	rjmp	.+52     	; 0x270 <__vector_20+0xa2>
			}
	}
	else if (decrement_flag==true){
 23c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <decrement_flag>
 240:	88 23       	and	r24, r24
 242:	b1 f0       	breq	.+44     	; 0x270 <__vector_20+0xa2>
			 if((OCR1A<DELAYMAX)&&(OCR1A<TRIACdelay)){
 244:	8a b5       	in	r24, 0x2a	; 42
 246:	9b b5       	in	r25, 0x2b	; 43
 248:	88 35       	cpi	r24, 0x58	; 88
 24a:	9b 41       	sbci	r25, 0x1B	; 27
 24c:	78 f4       	brcc	.+30     	; 0x26c <__vector_20+0x9e>
 24e:	2a b5       	in	r18, 0x2a	; 42
 250:	3b b5       	in	r19, 0x2b	; 43
 252:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TRIACdelay>
 256:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TRIACdelay+0x1>
 25a:	28 17       	cp	r18, r24
 25c:	39 07       	cpc	r19, r25
 25e:	30 f4       	brcc	.+12     	; 0x26c <__vector_20+0x9e>
				OCR1A +=DELAYCNTRLSOFTTRANSITION;
 260:	8a b5       	in	r24, 0x2a	; 42
 262:	9b b5       	in	r25, 0x2b	; 43
 264:	0a 96       	adiw	r24, 0x0a	; 10
 266:	9b bd       	out	0x2b, r25	; 43
 268:	8a bd       	out	0x2a, r24	; 42
 26a:	02 c0       	rjmp	.+4      	; 0x270 <__vector_20+0xa2>
			}
			else{
				decrement_flag=false;
 26c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <decrement_flag>
			}
		}
	Timer1_Start();
 270:	65 d1       	rcall	.+714    	; 0x53c <Timer1_Start>
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_4>:

ISR(TIMER1_COMPA_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	Timer1_Stop();
 2b6:	46 d1       	rcall	.+652    	; 0x544 <Timer1_Stop>
	if(set_power_max==true){
 2b8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <set_power_max>
 2bc:	88 23       	and	r24, r24
 2be:	21 f0       	breq	.+8      	; 0x2c8 <__vector_4+0x34>
		RESET_TMR1OUT0; // set max power
 2c0:	88 b3       	in	r24, 0x18	; 24
 2c2:	8f 7e       	andi	r24, 0xEF	; 239
 2c4:	88 bb       	out	0x18, r24	; 24
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <__vector_4+0x36>
	}
	else{
		Short_Pulse();
 2c8:	47 df       	rcall	.-370    	; 0x158 <Short_Pulse>
	}
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <Delay_ms>:

uint8_t Delay_ms(uint8_t delay, uint8_t reset){
	uint8_t return_status = 1;
	if(delay<=250){
 2ec:	8b 3f       	cpi	r24, 0xFB	; 251
 2ee:	a8 f4       	brcc	.+42     	; 0x31a <Delay_ms+0x2e>
		uint8_t counterdata= (uint8_t)(delay*0.976);
 2f0:	68 2f       	mov	r22, r24
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	57 d1       	rcall	.+686    	; 0x5a8 <__floatsisf>
 2fa:	23 e2       	ldi	r18, 0x23	; 35
 2fc:	3b ed       	ldi	r19, 0xDB	; 219
 2fe:	49 e7       	ldi	r20, 0x79	; 121
 300:	5f e3       	ldi	r21, 0x3F	; 63
 302:	b6 d1       	rcall	.+876    	; 0x670 <__mulsf3>
 304:	23 d1       	rcall	.+582    	; 0x54c <__fixunssfsi>
		TCNT0 = (255-counterdata);
 306:	60 95       	com	r22
 308:	62 bf       	out	0x32, r22	; 50
		while(!(TIFR&(1<<TOV0))){
 30a:	08 b6       	in	r0, 0x38	; 56
 30c:	01 fe       	sbrs	r0, 1
 30e:	fd cf       	rjmp	.-6      	; 0x30a <Delay_ms+0x1e>
				if(reset==(uint8_t)1)
					return_status= 1;
				}// wait until counter reaches 255
		TIFR |= 1<<TOV0;
 310:	88 b7       	in	r24, 0x38	; 56
 312:	82 60       	ori	r24, 0x02	; 2
 314:	88 bf       	out	0x38, r24	; 56
		return_status= 0;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
		Short_Pulse();
	}
}

uint8_t Delay_ms(uint8_t delay, uint8_t reset){
	uint8_t return_status = 1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
				}// wait until counter reaches 255
		TIFR |= 1<<TOV0;
		return_status= 0;
	}
	return return_status;
}
 31c:	08 95       	ret

0000031e <Increment_decrement_LED>:
	SoftStart=false;
	TRIACdelay=0;
}

void Increment_decrement_LED(led_status_t led_status){
	if(led_status == INCREMENT){
 31e:	81 11       	cpse	r24, r1
 320:	2f c0       	rjmp	.+94     	; 0x380 <Increment_decrement_LED+0x62>
		if(LED<4 && (TRIACdelay>=DELAYMIN)){
 322:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 326:	84 30       	cpi	r24, 0x04	; 4
 328:	08 f0       	brcs	.+2      	; 0x32c <Increment_decrement_LED+0xe>
 32a:	58 c0       	rjmp	.+176    	; 0x3dc <Increment_decrement_LED+0xbe>
 32c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TRIACdelay>
 330:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TRIACdelay+0x1>
 334:	88 35       	cpi	r24, 0x58	; 88
 336:	92 40       	sbci	r25, 0x02	; 2
 338:	08 f4       	brcc	.+2      	; 0x33c <Increment_decrement_LED+0x1e>
 33a:	50 c0       	rjmp	.+160    	; 0x3dc <Increment_decrement_LED+0xbe>
			LED++;
 33c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 340:	8f 5f       	subi	r24, 0xFF	; 255
 342:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			switch(LED){
 346:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	69 f0       	breq	.+26     	; 0x368 <Increment_decrement_LED+0x4a>
 34e:	18 f4       	brcc	.+6      	; 0x356 <Increment_decrement_LED+0x38>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	31 f0       	breq	.+12     	; 0x360 <Increment_decrement_LED+0x42>
 354:	08 95       	ret
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	59 f0       	breq	.+22     	; 0x370 <Increment_decrement_LED+0x52>
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	69 f0       	breq	.+26     	; 0x378 <Increment_decrement_LED+0x5a>
 35e:	08 95       	ret
				case 1:
				SET_LED1;
 360:	88 b3       	in	r24, 0x18	; 24
 362:	87 7f       	andi	r24, 0xF7	; 247
 364:	88 bb       	out	0x18, r24	; 24
				break;
 366:	08 95       	ret
				case 2:
				SET_LED2;
 368:	88 b3       	in	r24, 0x18	; 24
 36a:	8b 7f       	andi	r24, 0xFB	; 251
 36c:	88 bb       	out	0x18, r24	; 24
				break;
 36e:	08 95       	ret
				case 3:
				SET_LED3;
 370:	88 b3       	in	r24, 0x18	; 24
 372:	8d 7f       	andi	r24, 0xFD	; 253
 374:	88 bb       	out	0x18, r24	; 24
				break;
 376:	08 95       	ret
				case 4:
				SET_LED4;
 378:	88 b3       	in	r24, 0x18	; 24
 37a:	8e 7f       	andi	r24, 0xFE	; 254
 37c:	88 bb       	out	0x18, r24	; 24
				break;
 37e:	08 95       	ret
			}
		}
	}
	else if (led_status == DECREMENT){
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	61 f5       	brne	.+88     	; 0x3dc <Increment_decrement_LED+0xbe>
		if(LED>=1 && TRIACdelay<=DELAYMAX){
 384:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 388:	88 23       	and	r24, r24
 38a:	41 f1       	breq	.+80     	; 0x3dc <Increment_decrement_LED+0xbe>
 38c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TRIACdelay>
 390:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TRIACdelay+0x1>
 394:	89 35       	cpi	r24, 0x59	; 89
 396:	9b 41       	sbci	r25, 0x1B	; 27
 398:	08 f5       	brcc	.+66     	; 0x3dc <Increment_decrement_LED+0xbe>
			switch(LED){
 39a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	69 f0       	breq	.+26     	; 0x3bc <Increment_decrement_LED+0x9e>
 3a2:	18 f4       	brcc	.+6      	; 0x3aa <Increment_decrement_LED+0x8c>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	31 f0       	breq	.+12     	; 0x3b4 <Increment_decrement_LED+0x96>
 3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <Increment_decrement_LED+0xb4>
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	59 f0       	breq	.+22     	; 0x3c4 <Increment_decrement_LED+0xa6>
 3ae:	84 30       	cpi	r24, 0x04	; 4
 3b0:	69 f0       	breq	.+26     	; 0x3cc <Increment_decrement_LED+0xae>
 3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <Increment_decrement_LED+0xb4>
				case 1:
				RESET_LED1;
 3b4:	88 b3       	in	r24, 0x18	; 24
 3b6:	88 60       	ori	r24, 0x08	; 8
 3b8:	88 bb       	out	0x18, r24	; 24
				break;
 3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <Increment_decrement_LED+0xb4>
				case 2:
				RESET_LED2;
 3bc:	88 b3       	in	r24, 0x18	; 24
 3be:	84 60       	ori	r24, 0x04	; 4
 3c0:	88 bb       	out	0x18, r24	; 24
				break;
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <Increment_decrement_LED+0xb4>
				case 3:
				RESET_LED3;
 3c4:	88 b3       	in	r24, 0x18	; 24
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	88 bb       	out	0x18, r24	; 24
				break;
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <Increment_decrement_LED+0xb4>
				case 4:
				RESET_LED4;
 3cc:	88 b3       	in	r24, 0x18	; 24
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	88 bb       	out	0x18, r24	; 24
				break;
			}
			LED--;
 3d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d6:	81 50       	subi	r24, 0x01	; 1
 3d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3dc:	08 95       	ret

000003de <Soft_Start_and_Run_to_Max>:
	}
	return return_status;
}


void Soft_Start_and_Run_to_Max(void){
 3de:	cf 93       	push	r28
	uint8_t cnt=0;
	SoftStart=true;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <SoftStart>
	SET_LED0;// turn ON LED0
 3e6:	82 b3       	in	r24, 0x12	; 18
 3e8:	8f 7d       	andi	r24, 0xDF	; 223
 3ea:	82 bb       	out	0x12, r24	; 18
	for(TRIACdelay=DELAYMAXSOFTSTART; TRIACdelay>DELAYMIN; TRIACdelay-=DELAYSOFTSTART){
 3ec:	80 e4       	ldi	r24, 0x40	; 64
 3ee:	9f e1       	ldi	r25, 0x1F	; 31
 3f0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <TRIACdelay+0x1>
 3f4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <TRIACdelay>
	return return_status;
}


void Soft_Start_and_Run_to_Max(void){
	uint8_t cnt=0;
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
	SoftStart=true;
	SET_LED0;// turn ON LED0
	for(TRIACdelay=DELAYMAXSOFTSTART; TRIACdelay>DELAYMIN; TRIACdelay-=DELAYSOFTSTART){
 3fa:	14 c0       	rjmp	.+40     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			if((uint8_t)0 == Delay_ms(100, 0)){
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	84 e6       	ldi	r24, 0x64	; 100
 400:	75 df       	rcall	.-278    	; 0x2ec <Delay_ms>
 402:	81 11       	cpse	r24, r1
 404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				cnt++;
 406:	cf 5f       	subi	r28, 0xFF	; 255
				if(cnt>=5){
 408:	c5 30       	cpi	r28, 0x05	; 5
 40a:	10 f0       	brcs	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
					Increment_decrement_LED(INCREMENT);
 40c:	88 df       	rcall	.-240    	; 0x31e <Increment_decrement_LED>
					cnt=0;
 40e:	c0 e0       	ldi	r28, 0x00	; 0

void Soft_Start_and_Run_to_Max(void){
	uint8_t cnt=0;
	SoftStart=true;
	SET_LED0;// turn ON LED0
	for(TRIACdelay=DELAYMAXSOFTSTART; TRIACdelay>DELAYMIN; TRIACdelay-=DELAYSOFTSTART){
 410:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TRIACdelay>
 414:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TRIACdelay+0x1>
 418:	82 57       	subi	r24, 0x72	; 114
 41a:	91 40       	sbci	r25, 0x01	; 1
 41c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <TRIACdelay+0x1>
 420:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <TRIACdelay>
 424:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TRIACdelay>
 428:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <TRIACdelay+0x1>
 42c:	89 35       	cpi	r24, 0x59	; 89
 42e:	92 40       	sbci	r25, 0x02	; 2
 430:	28 f7       	brcc	.-54     	; 0x3fc <Soft_Start_and_Run_to_Max+0x1e>
					Increment_decrement_LED(INCREMENT);
					cnt=0;
				}
			}
		}
	set_power_max=true;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <set_power_max>
	SoftStart=false;
 438:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <SoftStart>
	TRIACdelay=0;
 43c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <TRIACdelay+0x1>
 440:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <TRIACdelay>
}
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <Output_Pins_Init>:


// init output PINs
void Output_Pins_Init(void){
// PWM output
	 DDRB |= (1 << DDB4); // as output for TMR1 PWM
 448:	87 b3       	in	r24, 0x17	; 23
 44a:	80 61       	ori	r24, 0x10	; 16
 44c:	87 bb       	out	0x17, r24	; 23
	 SET_TMR1OUT0;// set to zero
 44e:	88 b3       	in	r24, 0x18	; 24
 450:	80 61       	ori	r24, 0x10	; 16
 452:	88 bb       	out	0x18, r24	; 24
// set LEDs indicating power
	DDRD |= (1 << DDD5); // LED0
 454:	81 b3       	in	r24, 0x11	; 17
 456:	80 62       	ori	r24, 0x20	; 32
 458:	81 bb       	out	0x11, r24	; 17
	  RESET_LED4;// set to zero
 45a:	88 b3       	in	r24, 0x18	; 24
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB3); // LED1
 460:	87 b3       	in	r24, 0x17	; 23
 462:	88 60       	ori	r24, 0x08	; 8
 464:	87 bb       	out	0x17, r24	; 23
	  RESET_LED3;// set to zero
 466:	88 b3       	in	r24, 0x18	; 24
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB2); // LED2
 46c:	87 b3       	in	r24, 0x17	; 23
 46e:	84 60       	ori	r24, 0x04	; 4
 470:	87 bb       	out	0x17, r24	; 23
	  RESET_LED2;// set to zero
 472:	88 b3       	in	r24, 0x18	; 24
 474:	84 60       	ori	r24, 0x04	; 4
 476:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB1); // LED3
 478:	87 b3       	in	r24, 0x17	; 23
 47a:	82 60       	ori	r24, 0x02	; 2
 47c:	87 bb       	out	0x17, r24	; 23
	  RESET_LED1;// set to zero
 47e:	88 b3       	in	r24, 0x18	; 24
 480:	88 60       	ori	r24, 0x08	; 8
 482:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB0); // LED4
 484:	87 b3       	in	r24, 0x17	; 23
 486:	81 60       	ori	r24, 0x01	; 1
 488:	87 bb       	out	0x17, r24	; 23
	  RESET_LED0;// set to zero
 48a:	82 b3       	in	r24, 0x12	; 18
 48c:	80 62       	ori	r24, 0x20	; 32
 48e:	82 bb       	out	0x12, r24	; 18
	 //another set of LEDs indicating filters statuses
	 DDRD |= (1 << DDD6); // LED5 brush filter
 490:	81 b3       	in	r24, 0x11	; 17
 492:	80 64       	ori	r24, 0x40	; 64
 494:	81 bb       	out	0x11, r24	; 17
	  RESET_LED5;// set to zero
 496:	82 b3       	in	r24, 0x12	; 18
 498:	80 64       	ori	r24, 0x40	; 64
 49a:	82 bb       	out	0x12, r24	; 18
	 DDRD |= (1 << DDD4); // LED6
 49c:	81 b3       	in	r24, 0x11	; 17
 49e:	80 61       	ori	r24, 0x10	; 16
 4a0:	81 bb       	out	0x11, r24	; 17
	  RESET_LED6;// set to zero
 4a2:	82 b3       	in	r24, 0x12	; 18
 4a4:	80 61       	ori	r24, 0x10	; 16
 4a6:	82 bb       	out	0x12, r24	; 18
	  // brush socket control
	 DDRB |= (1 << DDB7); // socket
 4a8:	87 b3       	in	r24, 0x17	; 23
 4aa:	80 68       	ori	r24, 0x80	; 128
 4ac:	87 bb       	out	0x17, r24	; 23
	 RESET_SOCKET;// set to zero 
 4ae:	88 b3       	in	r24, 0x18	; 24
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	88 bb       	out	0x18, r24	; 24
 4b4:	08 95       	ret

000004b6 <Input_Pins_Init>:
}

// init input PINs
void Input_Pins_Init(void){
	//pins for min/max buttons
	DDRD &= ~(1 << DDD2); // PD2 as input for ext interrupt
 4b6:	81 b3       	in	r24, 0x11	; 17
 4b8:	8b 7f       	andi	r24, 0xFB	; 251
 4ba:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD2; // pull up
 4bc:	82 b3       	in	r24, 0x12	; 18
 4be:	84 60       	ori	r24, 0x04	; 4
 4c0:	82 bb       	out	0x12, r24	; 18
	DDRD &= ~(1 << DDD3); // PD3 as input for ext interrupt
 4c2:	81 b3       	in	r24, 0x11	; 17
 4c4:	87 7f       	andi	r24, 0xF7	; 247
 4c6:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD3; // pull up
 4c8:	82 b3       	in	r24, 0x12	; 18
 4ca:	88 60       	ori	r24, 0x08	; 8
 4cc:	82 bb       	out	0x12, r24	; 18
	//pins for filter sensors
	DDRD &= ~(1 << DDD1); // PD1 as input 
 4ce:	81 b3       	in	r24, 0x11	; 17
 4d0:	8d 7f       	andi	r24, 0xFD	; 253
 4d2:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD1; // pull up
 4d4:	82 b3       	in	r24, 0x12	; 18
 4d6:	82 60       	ori	r24, 0x02	; 2
 4d8:	82 bb       	out	0x12, r24	; 18
	DDRA &= ~(1 << DDA1); // PA1 as input for "Worek" brush filter
 4da:	8a b3       	in	r24, 0x1a	; 26
 4dc:	8d 7f       	andi	r24, 0xFD	; 253
 4de:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 1 << PORTA1; // pull up
 4e0:	8b b3       	in	r24, 0x1b	; 27
 4e2:	82 60       	ori	r24, 0x02	; 2
 4e4:	8b bb       	out	0x1b, r24	; 27
	DDRA &= ~(1 << DDA0); // PA0 as input for "brush holder"
 4e6:	8a b3       	in	r24, 0x1a	; 26
 4e8:	8e 7f       	andi	r24, 0xFE	; 254
 4ea:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 1 << PORTA0; // pull up
 4ec:	8b b3       	in	r24, 0x1b	; 27
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	8b bb       	out	0x1b, r24	; 27
	
	//pin for ZCD
	DDRD &= ~(1 << DDD0); // PD0 as input for zero cross detector
 4f2:	81 b3       	in	r24, 0x11	; 17
 4f4:	8e 7f       	andi	r24, 0xFE	; 254
 4f6:	81 bb       	out	0x11, r24	; 17
	// Configure ext interrupt
	PCMSK2 |= 1<<PCINT11;
 4f8:	85 b1       	in	r24, 0x05	; 5
 4fa:	81 60       	ori	r24, 0x01	; 1
 4fc:	85 b9       	out	0x05, r24	; 5
	GIMSK |= 1<<PCIE2;
 4fe:	8b b7       	in	r24, 0x3b	; 59
 500:	80 61       	ori	r24, 0x10	; 16
 502:	8b bf       	out	0x3b, r24	; 59
	
	// Configure INT0 to trigger on falling edge
	MCUCR |= (1 << ISC01);
 504:	85 b7       	in	r24, 0x35	; 53
 506:	82 60       	ori	r24, 0x02	; 2
 508:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
 50a:	85 b7       	in	r24, 0x35	; 53
 50c:	8e 7f       	andi	r24, 0xFE	; 254
 50e:	85 bf       	out	0x35, r24	; 53
	// Configure INT1 to trigger on falling edge
	MCUCR |= (1 << ISC11);
 510:	85 b7       	in	r24, 0x35	; 53
 512:	88 60       	ori	r24, 0x08	; 8
 514:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
 516:	85 b7       	in	r24, 0x35	; 53
 518:	8b 7f       	andi	r24, 0xFB	; 251
 51a:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT0) | (1<<INT1);// enable interrupts
 51c:	8b b7       	in	r24, 0x3b	; 59
 51e:	80 6c       	ori	r24, 0xC0	; 192
 520:	8b bf       	out	0x3b, r24	; 59
 522:	08 95       	ret

00000524 <Timer0_Init>:
}

// init timers
void Timer0_Init(void){
	TCNT0 = 0;
 524:	12 be       	out	0x32, r1	; 50
	TCCR0B |= 1<<CS02 |1<<CS00; // clkI/O/1024 (From prescaler)
 526:	83 b7       	in	r24, 0x33	; 51
 528:	85 60       	ori	r24, 0x05	; 5
 52a:	83 bf       	out	0x33, r24	; 51
 52c:	08 95       	ret

0000052e <Timer1_Init>:

}

void Timer1_Init(void){
	 TCCR1B |= (1<<WGM12);  //CTC OCR1A, 
 52e:	8e b5       	in	r24, 0x2e	; 46
 530:	88 60       	ori	r24, 0x08	; 8
 532:	8e bd       	out	0x2e, r24	; 46
	 TIMSK |= (1 << OCIE1A);
 534:	89 b7       	in	r24, 0x39	; 57
 536:	80 64       	ori	r24, 0x40	; 64
 538:	89 bf       	out	0x39, r24	; 57
 53a:	08 95       	ret

0000053c <Timer1_Start>:
}

void Timer1_Start(void){
	 TCCR1B |= 1<<CS10;// clkI/O/1 (No prescaling)
 53c:	8e b5       	in	r24, 0x2e	; 46
 53e:	81 60       	ori	r24, 0x01	; 1
 540:	8e bd       	out	0x2e, r24	; 46
 542:	08 95       	ret

00000544 <Timer1_Stop>:
}

void Timer1_Stop(void){
	TCCR1B &= ~(1<<CS10);//clkI/O/1 (No prescaling)
 544:	8e b5       	in	r24, 0x2e	; 46
 546:	8e 7f       	andi	r24, 0xFE	; 254
 548:	8e bd       	out	0x2e, r24	; 46
 54a:	08 95       	ret

0000054c <__fixunssfsi>:
 54c:	70 d0       	rcall	.+224    	; 0x62e <__fp_splitA>
 54e:	88 f0       	brcs	.+34     	; 0x572 <__fixunssfsi+0x26>
 550:	9f 57       	subi	r25, 0x7F	; 127
 552:	90 f0       	brcs	.+36     	; 0x578 <__fixunssfsi+0x2c>
 554:	b9 2f       	mov	r27, r25
 556:	99 27       	eor	r25, r25
 558:	b7 51       	subi	r27, 0x17	; 23
 55a:	a0 f0       	brcs	.+40     	; 0x584 <__fixunssfsi+0x38>
 55c:	d1 f0       	breq	.+52     	; 0x592 <__fixunssfsi+0x46>
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	1a f0       	brmi	.+6      	; 0x56e <__fixunssfsi+0x22>
 568:	ba 95       	dec	r27
 56a:	c9 f7       	brne	.-14     	; 0x55e <__fixunssfsi+0x12>
 56c:	12 c0       	rjmp	.+36     	; 0x592 <__fixunssfsi+0x46>
 56e:	b1 30       	cpi	r27, 0x01	; 1
 570:	81 f0       	breq	.+32     	; 0x592 <__fixunssfsi+0x46>
 572:	77 d0       	rcall	.+238    	; 0x662 <__fp_zero>
 574:	b1 e0       	ldi	r27, 0x01	; 1
 576:	08 95       	ret
 578:	74 c0       	rjmp	.+232    	; 0x662 <__fp_zero>
 57a:	67 2f       	mov	r22, r23
 57c:	78 2f       	mov	r23, r24
 57e:	88 27       	eor	r24, r24
 580:	b8 5f       	subi	r27, 0xF8	; 248
 582:	39 f0       	breq	.+14     	; 0x592 <__fixunssfsi+0x46>
 584:	b9 3f       	cpi	r27, 0xF9	; 249
 586:	cc f3       	brlt	.-14     	; 0x57a <__fixunssfsi+0x2e>
 588:	86 95       	lsr	r24
 58a:	77 95       	ror	r23
 58c:	67 95       	ror	r22
 58e:	b3 95       	inc	r27
 590:	d9 f7       	brne	.-10     	; 0x588 <__fixunssfsi+0x3c>
 592:	3e f4       	brtc	.+14     	; 0x5a2 <__fixunssfsi+0x56>
 594:	90 95       	com	r25
 596:	80 95       	com	r24
 598:	70 95       	com	r23
 59a:	61 95       	neg	r22
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	08 95       	ret

000005a4 <__floatunsisf>:
 5a4:	e8 94       	clt
 5a6:	09 c0       	rjmp	.+18     	; 0x5ba <__floatsisf+0x12>

000005a8 <__floatsisf>:
 5a8:	97 fb       	bst	r25, 7
 5aa:	3e f4       	brtc	.+14     	; 0x5ba <__floatsisf+0x12>
 5ac:	90 95       	com	r25
 5ae:	80 95       	com	r24
 5b0:	70 95       	com	r23
 5b2:	61 95       	neg	r22
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	99 23       	and	r25, r25
 5bc:	a9 f0       	breq	.+42     	; 0x5e8 <__floatsisf+0x40>
 5be:	f9 2f       	mov	r31, r25
 5c0:	96 e9       	ldi	r25, 0x96	; 150
 5c2:	bb 27       	eor	r27, r27
 5c4:	93 95       	inc	r25
 5c6:	f6 95       	lsr	r31
 5c8:	87 95       	ror	r24
 5ca:	77 95       	ror	r23
 5cc:	67 95       	ror	r22
 5ce:	b7 95       	ror	r27
 5d0:	f1 11       	cpse	r31, r1
 5d2:	f8 cf       	rjmp	.-16     	; 0x5c4 <__floatsisf+0x1c>
 5d4:	fa f4       	brpl	.+62     	; 0x614 <__floatsisf+0x6c>
 5d6:	bb 0f       	add	r27, r27
 5d8:	11 f4       	brne	.+4      	; 0x5de <__floatsisf+0x36>
 5da:	60 ff       	sbrs	r22, 0
 5dc:	1b c0       	rjmp	.+54     	; 0x614 <__floatsisf+0x6c>
 5de:	6f 5f       	subi	r22, 0xFF	; 255
 5e0:	7f 4f       	sbci	r23, 0xFF	; 255
 5e2:	8f 4f       	sbci	r24, 0xFF	; 255
 5e4:	9f 4f       	sbci	r25, 0xFF	; 255
 5e6:	16 c0       	rjmp	.+44     	; 0x614 <__floatsisf+0x6c>
 5e8:	88 23       	and	r24, r24
 5ea:	11 f0       	breq	.+4      	; 0x5f0 <__floatsisf+0x48>
 5ec:	96 e9       	ldi	r25, 0x96	; 150
 5ee:	11 c0       	rjmp	.+34     	; 0x612 <__floatsisf+0x6a>
 5f0:	77 23       	and	r23, r23
 5f2:	21 f0       	breq	.+8      	; 0x5fc <__floatsisf+0x54>
 5f4:	9e e8       	ldi	r25, 0x8E	; 142
 5f6:	87 2f       	mov	r24, r23
 5f8:	76 2f       	mov	r23, r22
 5fa:	05 c0       	rjmp	.+10     	; 0x606 <__floatsisf+0x5e>
 5fc:	66 23       	and	r22, r22
 5fe:	71 f0       	breq	.+28     	; 0x61c <__floatsisf+0x74>
 600:	96 e8       	ldi	r25, 0x86	; 134
 602:	86 2f       	mov	r24, r22
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	2a f0       	brmi	.+10     	; 0x614 <__floatsisf+0x6c>
 60a:	9a 95       	dec	r25
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	88 1f       	adc	r24, r24
 612:	da f7       	brpl	.-10     	; 0x60a <__floatsisf+0x62>
 614:	88 0f       	add	r24, r24
 616:	96 95       	lsr	r25
 618:	87 95       	ror	r24
 61a:	97 f9       	bld	r25, 7
 61c:	08 95       	ret

0000061e <__fp_split3>:
 61e:	57 fd       	sbrc	r21, 7
 620:	90 58       	subi	r25, 0x80	; 128
 622:	44 0f       	add	r20, r20
 624:	55 1f       	adc	r21, r21
 626:	59 f0       	breq	.+22     	; 0x63e <__fp_splitA+0x10>
 628:	5f 3f       	cpi	r21, 0xFF	; 255
 62a:	71 f0       	breq	.+28     	; 0x648 <__fp_splitA+0x1a>
 62c:	47 95       	ror	r20

0000062e <__fp_splitA>:
 62e:	88 0f       	add	r24, r24
 630:	97 fb       	bst	r25, 7
 632:	99 1f       	adc	r25, r25
 634:	61 f0       	breq	.+24     	; 0x64e <__fp_splitA+0x20>
 636:	9f 3f       	cpi	r25, 0xFF	; 255
 638:	79 f0       	breq	.+30     	; 0x658 <__fp_splitA+0x2a>
 63a:	87 95       	ror	r24
 63c:	08 95       	ret
 63e:	12 16       	cp	r1, r18
 640:	13 06       	cpc	r1, r19
 642:	14 06       	cpc	r1, r20
 644:	55 1f       	adc	r21, r21
 646:	f2 cf       	rjmp	.-28     	; 0x62c <__fp_split3+0xe>
 648:	46 95       	lsr	r20
 64a:	f1 df       	rcall	.-30     	; 0x62e <__fp_splitA>
 64c:	08 c0       	rjmp	.+16     	; 0x65e <__fp_splitA+0x30>
 64e:	16 16       	cp	r1, r22
 650:	17 06       	cpc	r1, r23
 652:	18 06       	cpc	r1, r24
 654:	99 1f       	adc	r25, r25
 656:	f1 cf       	rjmp	.-30     	; 0x63a <__fp_splitA+0xc>
 658:	86 95       	lsr	r24
 65a:	71 05       	cpc	r23, r1
 65c:	61 05       	cpc	r22, r1
 65e:	08 94       	sec
 660:	08 95       	ret

00000662 <__fp_zero>:
 662:	e8 94       	clt

00000664 <__fp_szero>:
 664:	bb 27       	eor	r27, r27
 666:	66 27       	eor	r22, r22
 668:	77 27       	eor	r23, r23
 66a:	cb 01       	movw	r24, r22
 66c:	97 f9       	bld	r25, 7
 66e:	08 95       	ret

00000670 <__mulsf3>:
 670:	0a d0       	rcall	.+20     	; 0x686 <__mulsf3x>
 672:	80 c0       	rjmp	.+256    	; 0x774 <__fp_round>
 674:	71 d0       	rcall	.+226    	; 0x758 <__fp_pscA>
 676:	28 f0       	brcs	.+10     	; 0x682 <__mulsf3+0x12>
 678:	76 d0       	rcall	.+236    	; 0x766 <__fp_pscB>
 67a:	18 f0       	brcs	.+6      	; 0x682 <__mulsf3+0x12>
 67c:	95 23       	and	r25, r21
 67e:	09 f0       	breq	.+2      	; 0x682 <__mulsf3+0x12>
 680:	62 c0       	rjmp	.+196    	; 0x746 <__fp_inf>
 682:	67 c0       	rjmp	.+206    	; 0x752 <__fp_nan>
 684:	ef cf       	rjmp	.-34     	; 0x664 <__fp_szero>

00000686 <__mulsf3x>:
 686:	cb df       	rcall	.-106    	; 0x61e <__fp_split3>
 688:	a8 f3       	brcs	.-22     	; 0x674 <__mulsf3+0x4>

0000068a <__mulsf3_pse>:
 68a:	99 23       	and	r25, r25
 68c:	d9 f3       	breq	.-10     	; 0x684 <__mulsf3+0x14>
 68e:	55 23       	and	r21, r21
 690:	c9 f3       	breq	.-14     	; 0x684 <__mulsf3+0x14>
 692:	95 0f       	add	r25, r21
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	55 1f       	adc	r21, r21
 698:	aa 27       	eor	r26, r26
 69a:	ee 27       	eor	r30, r30
 69c:	ff 27       	eor	r31, r31
 69e:	bb 27       	eor	r27, r27
 6a0:	00 24       	eor	r0, r0
 6a2:	08 94       	sec
 6a4:	67 95       	ror	r22
 6a6:	20 f4       	brcc	.+8      	; 0x6b0 <__mulsf3_pse+0x26>
 6a8:	e2 0f       	add	r30, r18
 6aa:	f3 1f       	adc	r31, r19
 6ac:	b4 1f       	adc	r27, r20
 6ae:	0a 1e       	adc	r0, r26
 6b0:	22 0f       	add	r18, r18
 6b2:	33 1f       	adc	r19, r19
 6b4:	44 1f       	adc	r20, r20
 6b6:	aa 1f       	adc	r26, r26
 6b8:	66 95       	lsr	r22
 6ba:	a9 f7       	brne	.-22     	; 0x6a6 <__mulsf3_pse+0x1c>
 6bc:	77 95       	ror	r23
 6be:	30 f4       	brcc	.+12     	; 0x6cc <__mulsf3_pse+0x42>
 6c0:	f3 0f       	add	r31, r19
 6c2:	b4 1f       	adc	r27, r20
 6c4:	0a 1e       	adc	r0, r26
 6c6:	12 1e       	adc	r1, r18
 6c8:	08 f4       	brcc	.+2      	; 0x6cc <__mulsf3_pse+0x42>
 6ca:	63 95       	inc	r22
 6cc:	33 0f       	add	r19, r19
 6ce:	44 1f       	adc	r20, r20
 6d0:	aa 1f       	adc	r26, r26
 6d2:	22 1f       	adc	r18, r18
 6d4:	76 95       	lsr	r23
 6d6:	99 f7       	brne	.-26     	; 0x6be <__mulsf3_pse+0x34>
 6d8:	87 95       	ror	r24
 6da:	20 f4       	brcc	.+8      	; 0x6e4 <__mulsf3_pse+0x5a>
 6dc:	b4 0f       	add	r27, r20
 6de:	0a 1e       	adc	r0, r26
 6e0:	12 1e       	adc	r1, r18
 6e2:	63 1f       	adc	r22, r19
 6e4:	44 0f       	add	r20, r20
 6e6:	aa 1f       	adc	r26, r26
 6e8:	22 1f       	adc	r18, r18
 6ea:	33 1f       	adc	r19, r19
 6ec:	86 95       	lsr	r24
 6ee:	a9 f7       	brne	.-22     	; 0x6da <__mulsf3_pse+0x50>
 6f0:	86 2f       	mov	r24, r22
 6f2:	71 2d       	mov	r23, r1
 6f4:	60 2d       	mov	r22, r0
 6f6:	11 24       	eor	r1, r1
 6f8:	9f 57       	subi	r25, 0x7F	; 127
 6fa:	50 40       	sbci	r21, 0x00	; 0
 6fc:	8a f0       	brmi	.+34     	; 0x720 <__mulsf3_pse+0x96>
 6fe:	e1 f0       	breq	.+56     	; 0x738 <__mulsf3_pse+0xae>
 700:	88 23       	and	r24, r24
 702:	4a f0       	brmi	.+18     	; 0x716 <__mulsf3_pse+0x8c>
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	bb 1f       	adc	r27, r27
 70a:	66 1f       	adc	r22, r22
 70c:	77 1f       	adc	r23, r23
 70e:	88 1f       	adc	r24, r24
 710:	91 50       	subi	r25, 0x01	; 1
 712:	50 40       	sbci	r21, 0x00	; 0
 714:	a9 f7       	brne	.-22     	; 0x700 <__mulsf3_pse+0x76>
 716:	9e 3f       	cpi	r25, 0xFE	; 254
 718:	51 05       	cpc	r21, r1
 71a:	70 f0       	brcs	.+28     	; 0x738 <__mulsf3_pse+0xae>
 71c:	14 c0       	rjmp	.+40     	; 0x746 <__fp_inf>
 71e:	a2 cf       	rjmp	.-188    	; 0x664 <__fp_szero>
 720:	5f 3f       	cpi	r21, 0xFF	; 255
 722:	ec f3       	brlt	.-6      	; 0x71e <__mulsf3_pse+0x94>
 724:	98 3e       	cpi	r25, 0xE8	; 232
 726:	dc f3       	brlt	.-10     	; 0x71e <__mulsf3_pse+0x94>
 728:	86 95       	lsr	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b7 95       	ror	r27
 730:	f7 95       	ror	r31
 732:	e7 95       	ror	r30
 734:	9f 5f       	subi	r25, 0xFF	; 255
 736:	c1 f7       	brne	.-16     	; 0x728 <__mulsf3_pse+0x9e>
 738:	fe 2b       	or	r31, r30
 73a:	88 0f       	add	r24, r24
 73c:	91 1d       	adc	r25, r1
 73e:	96 95       	lsr	r25
 740:	87 95       	ror	r24
 742:	97 f9       	bld	r25, 7
 744:	08 95       	ret

00000746 <__fp_inf>:
 746:	97 f9       	bld	r25, 7
 748:	9f 67       	ori	r25, 0x7F	; 127
 74a:	80 e8       	ldi	r24, 0x80	; 128
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	08 95       	ret

00000752 <__fp_nan>:
 752:	9f ef       	ldi	r25, 0xFF	; 255
 754:	80 ec       	ldi	r24, 0xC0	; 192
 756:	08 95       	ret

00000758 <__fp_pscA>:
 758:	00 24       	eor	r0, r0
 75a:	0a 94       	dec	r0
 75c:	16 16       	cp	r1, r22
 75e:	17 06       	cpc	r1, r23
 760:	18 06       	cpc	r1, r24
 762:	09 06       	cpc	r0, r25
 764:	08 95       	ret

00000766 <__fp_pscB>:
 766:	00 24       	eor	r0, r0
 768:	0a 94       	dec	r0
 76a:	12 16       	cp	r1, r18
 76c:	13 06       	cpc	r1, r19
 76e:	14 06       	cpc	r1, r20
 770:	05 06       	cpc	r0, r21
 772:	08 95       	ret

00000774 <__fp_round>:
 774:	09 2e       	mov	r0, r25
 776:	03 94       	inc	r0
 778:	00 0c       	add	r0, r0
 77a:	11 f4       	brne	.+4      	; 0x780 <__fp_round+0xc>
 77c:	88 23       	and	r24, r24
 77e:	52 f0       	brmi	.+20     	; 0x794 <__fp_round+0x20>
 780:	bb 0f       	add	r27, r27
 782:	40 f4       	brcc	.+16     	; 0x794 <__fp_round+0x20>
 784:	bf 2b       	or	r27, r31
 786:	11 f4       	brne	.+4      	; 0x78c <__fp_round+0x18>
 788:	60 ff       	sbrs	r22, 0
 78a:	04 c0       	rjmp	.+8      	; 0x794 <__fp_round+0x20>
 78c:	6f 5f       	subi	r22, 0xFF	; 255
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	8f 4f       	sbci	r24, 0xFF	; 255
 792:	9f 4f       	sbci	r25, 0xFF	; 255
 794:	08 95       	ret

00000796 <_exit>:
 796:	f8 94       	cli

00000798 <__stop_program>:
 798:	ff cf       	rjmp	.-2      	; 0x798 <__stop_program>

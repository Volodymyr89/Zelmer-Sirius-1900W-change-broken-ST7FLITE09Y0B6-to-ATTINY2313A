
Zelmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000775  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b8  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049c  00000000  00000000  00000f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000150  00000000  00000000  0000186f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	48 c0       	rjmp	.+144    	; 0xd6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include "motor_and_LED_control.h"


int main(void)
{	
	Output_Pins_Init();
  48:	18 d0       	rcall	.+48     	; 0x7a <Output_Pins_Init>
	Timer0_Init();
  4a:	3c d0       	rcall	.+120    	; 0xc4 <Timer0_Init>
	Soft_Start_and_Run_to_Max();
  4c:	01 d0       	rcall	.+2      	; 0x50 <Soft_Start_and_Run_to_Max>
  4e:	ff cf       	rjmp	.-2      	; 0x4e <main+0x6>

00000050 <Soft_Start_and_Run_to_Max>:
	}
}

void Soft_Start_and_Run_to_Max(void){
	uint8_t duty_cycle = 10;
	SET_LED0;// turn ON LED0
  50:	87 b3       	in	r24, 0x17	; 23
  52:	80 61       	ori	r24, 0x10	; 16
  54:	87 bb       	out	0x17, r24	; 23
	for(uint8_t step=0; step<25; step++){
  56:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
}

void Soft_Start_and_Run_to_Max(void){
	uint8_t duty_cycle = 10;
  58:	9a e0       	ldi	r25, 0x0A	; 10
	SET_LED0;// turn ON LED0
	for(uint8_t step=0; step<25; step++){
  5a:	0c c0       	rjmp	.+24     	; 0x74 <Soft_Start_and_Run_to_Max+0x24>
		uint8_t cnt=0;// divider
		if(OCR0B<CNT0MAX){
  5c:	2c b7       	in	r18, 0x3c	; 60
  5e:	2f 3f       	cpi	r18, 0xFF	; 255
  60:	19 f0       	breq	.+6      	; 0x68 <Soft_Start_and_Run_to_Max+0x18>
			OCR0B=duty_cycle;
  62:	9c bf       	out	0x3c, r25	; 60
			Delay_100ms();
			duty_cycle+=10;
  64:	96 5f       	subi	r25, 0xF6	; 246
  66:	05 c0       	rjmp	.+10     	; 0x72 <Soft_Start_and_Run_to_Max+0x22>
			cnt++;
			if(cnt>=5){
				currentLEDnumber=Set_LED();
			}
		}
		else if (OCR0B>=250){
  68:	2c b7       	in	r18, 0x3c	; 60
  6a:	2a 3f       	cpi	r18, 0xFA	; 250
  6c:	10 f0       	brcs	.+4      	; 0x72 <Soft_Start_and_Run_to_Max+0x22>
			OCR0B=CNT0MAX;
  6e:	2f ef       	ldi	r18, 0xFF	; 255
  70:	2c bf       	out	0x3c, r18	; 60
}

void Soft_Start_and_Run_to_Max(void){
	uint8_t duty_cycle = 10;
	SET_LED0;// turn ON LED0
	for(uint8_t step=0; step<25; step++){
  72:	8f 5f       	subi	r24, 0xFF	; 255
  74:	89 31       	cpi	r24, 0x19	; 25
  76:	90 f3       	brcs	.-28     	; 0x5c <Soft_Start_and_Run_to_Max+0xc>
		}
		else if (OCR0B>=250){
			OCR0B=CNT0MAX;
		}
	}
}
  78:	08 95       	ret

0000007a <Output_Pins_Init>:
	 DDRB |= (1 << DDB0); // LED4
	 PORTB &= ~(1 << DDB0); // set to zero
}

// init input PINs
void Input_Pins_Init(void){
  7a:	81 b3       	in	r24, 0x11	; 17
  7c:	80 62       	ori	r24, 0x20	; 32
  7e:	81 bb       	out	0x11, r24	; 17
  80:	82 b3       	in	r24, 0x12	; 18
  82:	8f 7d       	andi	r24, 0xDF	; 223
  84:	82 bb       	out	0x12, r24	; 18
  86:	87 b3       	in	r24, 0x17	; 23
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	87 bb       	out	0x17, r24	; 23
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	8f 7e       	andi	r24, 0xEF	; 239
  90:	88 bb       	out	0x18, r24	; 24
  92:	87 b3       	in	r24, 0x17	; 23
  94:	88 60       	ori	r24, 0x08	; 8
  96:	87 bb       	out	0x17, r24	; 23
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	87 7f       	andi	r24, 0xF7	; 247
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	87 bb       	out	0x17, r24	; 23
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8b 7f       	andi	r24, 0xFB	; 251
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	87 bb       	out	0x17, r24	; 23
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	08 95       	ret

000000c4 <Timer0_Init>:

}

// init timer
void Timer0_Init(void){
	TCCR0B |= (1<<WGM00) | (1<<WGM01) | (1<<COM0B1); // fast PWM mode, Clear OC0A on Compare Match, set OC0B at TOP
  c4:	83 b7       	in	r24, 0x33	; 51
  c6:	83 62       	ori	r24, 0x23	; 35
  c8:	83 bf       	out	0x33, r24	; 51
	TCCR0B |= 1<<CS01; // clkI/O/8 (From prescaler)
  ca:	83 b7       	in	r24, 0x33	; 51
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	83 bf       	out	0x33, r24	; 51
	OCR0B = 10;// initial duty cycle
  d0:	8a e0       	ldi	r24, 0x0A	; 10
  d2:	8c bf       	out	0x3c, r24	; 60
  d4:	08 95       	ret

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>

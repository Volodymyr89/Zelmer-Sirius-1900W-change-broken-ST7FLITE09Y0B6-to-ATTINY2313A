
Zelmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000082  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059d  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d4  00000000  00000000  00000735  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  00000c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002da  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e8       	ldi	r30, 0x82	; 130
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	19 c0       	rjmp	.+50     	; 0x7e <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
#include "periphery_init.h"
#include "motor_and_LED_control.h"

int main(void)
{	
	Output_Pins_Init();
  4e:	01 d0       	rcall	.+2      	; 0x52 <Output_Pins_Init>
  50:	ff cf       	rjmp	.-2      	; 0x50 <main+0x2>

00000052 <Output_Pins_Init>:
#include "periphery_init.h"

// init output PINs
void Output_Pins_Init(void){
	
	 DDRD |= (1 << DDD5); // PD5 as output for TMR0
  52:	81 b3       	in	r24, 0x11	; 17
  54:	80 62       	ori	r24, 0x20	; 32
  56:	81 bb       	out	0x11, r24	; 17
	 PORTD &= ~(1 << DDD5); // set to zero
  58:	82 b3       	in	r24, 0x12	; 18
  5a:	8f 7d       	andi	r24, 0xDF	; 223
  5c:	82 bb       	out	0x12, r24	; 18
	 DDRB |= (1 << DDB4); // LED0
  5e:	87 b3       	in	r24, 0x17	; 23
  60:	80 61       	ori	r24, 0x10	; 16
  62:	87 bb       	out	0x17, r24	; 23
	 DDRB |= (1 << DDB3); // LED1
  64:	87 b3       	in	r24, 0x17	; 23
  66:	88 60       	ori	r24, 0x08	; 8
  68:	87 bb       	out	0x17, r24	; 23
	 DDRB |= (1 << DDB2); // LED2
  6a:	87 b3       	in	r24, 0x17	; 23
  6c:	84 60       	ori	r24, 0x04	; 4
  6e:	87 bb       	out	0x17, r24	; 23
	 DDRB |= (1 << DDB1); // LED3
  70:	87 b3       	in	r24, 0x17	; 23
  72:	82 60       	ori	r24, 0x02	; 2
  74:	87 bb       	out	0x17, r24	; 23
	 DDRB |= (1 << DDB0); // LED4
  76:	87 b3       	in	r24, 0x17	; 23
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	87 bb       	out	0x17, r24	; 23
  7c:	08 95       	ret

0000007e <_exit>:
  7e:	f8 94       	cli

00000080 <__stop_program>:
  80:	ff cf       	rjmp	.-2      	; 0x80 <__stop_program>


Zelmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f5  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051c  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f7  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	55 c0       	rjmp	.+170    	; 0xae <__vector_1>
   4:	63 c0       	rjmp	.+198    	; 0xcc <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	8c c0       	rjmp	.+280    	; 0x15e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include "motor_and_LED_control.h"


int main(void)
{	
	Output_Pins_Init();
  48:	50 d0       	rcall	.+160    	; 0xea <Output_Pins_Init>
	Timer0_Init();
  4a:	80 d0       	rcall	.+256    	; 0x14c <Timer0_Init>
	Soft_Start_and_Run_to_Max();
  4c:	14 d0       	rcall	.+40     	; 0x76 <Soft_Start_and_Run_to_Max>
  4e:	ff cf       	rjmp	.-2      	; 0x4e <main+0x6>

00000050 <Delay_100ms>:
		break;
		case 3:
		RESET_LED3;
		break;
		case 4:
		RESET_LED4;
  50:	80 ea       	ldi	r24, 0xA0	; 160
  52:	96 e8       	ldi	r25, 0x86	; 134
  54:	a1 e0       	ldi	r26, 0x01	; 1
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	02 c0       	rjmp	.+4      	; 0x5e <Delay_100ms+0xe>
  5a:	db 01       	movw	r26, r22
  5c:	ca 01       	movw	r24, r20
  5e:	ac 01       	movw	r20, r24
  60:	bd 01       	movw	r22, r26
  62:	41 50       	subi	r20, 0x01	; 1
  64:	51 09       	sbc	r21, r1
  66:	61 09       	sbc	r22, r1
  68:	71 09       	sbc	r23, r1
  6a:	89 2b       	or	r24, r25
  6c:	8a 2b       	or	r24, r26
  6e:	8b 2b       	or	r24, r27
  70:	a1 f7       	brne	.-24     	; 0x5a <Delay_100ms+0xa>
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	08 95       	ret

00000076 <Soft_Start_and_Run_to_Max>:
		break;
	}
}

void Soft_Start_and_Run_to_Max(void){
  76:	cf 93       	push	r28
  78:	df 93       	push	r29
	uint8_t duty_cycle = 10;
	SET_LED0;// turn ON LED0
  7a:	87 b3       	in	r24, 0x17	; 23
  7c:	80 61       	ori	r24, 0x10	; 16
  7e:	87 bb       	out	0x17, r24	; 23
	for(uint8_t step=0; step<CYCLENUM; step++){
  80:	c0 e0       	ldi	r28, 0x00	; 0
		break;
	}
}

void Soft_Start_and_Run_to_Max(void){
	uint8_t duty_cycle = 10;
  82:	da e0       	ldi	r29, 0x0A	; 10
	SET_LED0;// turn ON LED0
	for(uint8_t step=0; step<CYCLENUM; step++){
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__DATA_REGION_LENGTH__+0x24>
		uint8_t cnt=0;// divider
		if(OCR0B<CNT0MAX){
  86:	8c b7       	in	r24, 0x3c	; 60
  88:	8f 3f       	cpi	r24, 0xFF	; 255
  8a:	31 f0       	breq	.+12     	; 0x98 <__DATA_REGION_LENGTH__+0x18>
			OCR0B=duty_cycle;
  8c:	dc bf       	out	0x3c, r29	; 60
			if((uint8_t)0 == Delay_100ms()){
  8e:	e0 df       	rcall	.-64     	; 0x50 <Delay_100ms>
  90:	81 11       	cpse	r24, r1
  92:	07 c0       	rjmp	.+14     	; 0xa2 <__DATA_REGION_LENGTH__+0x22>
				duty_cycle+=10;
  94:	d6 5f       	subi	r29, 0xF6	; 246
  96:	05 c0       	rjmp	.+10     	; 0xa2 <__DATA_REGION_LENGTH__+0x22>
				if(cnt>=5){
					currentLEDnumber=Set_LED();
				}
			}
		}
		else if (OCR0B>=250){
  98:	8c b7       	in	r24, 0x3c	; 60
  9a:	8a 3f       	cpi	r24, 0xFA	; 250
  9c:	10 f0       	brcs	.+4      	; 0xa2 <__DATA_REGION_LENGTH__+0x22>
			OCR0B=CNT0MAX;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8c bf       	out	0x3c, r24	; 60
}

void Soft_Start_and_Run_to_Max(void){
	uint8_t duty_cycle = 10;
	SET_LED0;// turn ON LED0
	for(uint8_t step=0; step<CYCLENUM; step++){
  a2:	cf 5f       	subi	r28, 0xFF	; 255
  a4:	c9 31       	cpi	r28, 0x19	; 25
  a6:	78 f3       	brcs	.-34     	; 0x86 <__DATA_REGION_LENGTH__+0x6>
		}
		else if (OCR0B>=250){
			OCR0B=CNT0MAX;
		}
	}
}
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <__vector_1>:
	DDRD &= ~(1 << DDD3); // PD3 as input for ext interrupt
	PORTD |= 1 << DDD3; // pull up
	
	MCUCR &= ~(1<<ISC10) & (1<<ISC11) & (1<<ISC01) & (1<<ISC00); // The low level of INT0 and INT1 generates an interrupt request.
	GIMSK |= (1<<INT0) | (1<<INT1);// enable interrupts
	sei();//enable global interrupts
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	8a b7       	in	r24, 0x3a	; 58
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	8a bf       	out	0x3a, r24	; 58
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <__vector_2>:
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	8a b7       	in	r24, 0x3a	; 58
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	8a bf       	out	0x3a, r24	; 58
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <Output_Pins_Init>:
  ea:	81 b3       	in	r24, 0x11	; 17
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	81 bb       	out	0x11, r24	; 17
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	82 bb       	out	0x12, r24	; 18
  f6:	87 b3       	in	r24, 0x17	; 23
  f8:	80 61       	ori	r24, 0x10	; 16
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	88 bb       	out	0x18, r24	; 24
 102:	87 b3       	in	r24, 0x17	; 23
 104:	88 60       	ori	r24, 0x08	; 8
 106:	87 bb       	out	0x17, r24	; 23
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	87 7f       	andi	r24, 0xF7	; 247
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	87 b3       	in	r24, 0x17	; 23
 110:	84 60       	ori	r24, 0x04	; 4
 112:	87 bb       	out	0x17, r24	; 23
 114:	88 b3       	in	r24, 0x18	; 24
 116:	8b 7f       	andi	r24, 0xFB	; 251
 118:	88 bb       	out	0x18, r24	; 24
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	87 bb       	out	0x17, r24	; 23
 120:	88 b3       	in	r24, 0x18	; 24
 122:	8d 7f       	andi	r24, 0xFD	; 253
 124:	88 bb       	out	0x18, r24	; 24
 126:	87 b3       	in	r24, 0x17	; 23
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	88 bb       	out	0x18, r24	; 24
 132:	81 b3       	in	r24, 0x11	; 17
 134:	80 64       	ori	r24, 0x40	; 64
 136:	81 bb       	out	0x11, r24	; 17
 138:	82 b3       	in	r24, 0x12	; 18
 13a:	8f 7b       	andi	r24, 0xBF	; 191
 13c:	82 bb       	out	0x12, r24	; 18
 13e:	81 b3       	in	r24, 0x11	; 17
 140:	80 61       	ori	r24, 0x10	; 16
 142:	81 bb       	out	0x11, r24	; 17
 144:	82 b3       	in	r24, 0x12	; 18
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	82 bb       	out	0x12, r24	; 18
 14a:	08 95       	ret

0000014c <Timer0_Init>:
}

// init timer
void Timer0_Init(void){
	TCCR0B |= (1<<WGM00) | (1<<WGM01) | (1<<COM0B1); // fast PWM mode, Clear OC0A on Compare Match, set OC0B at TOP
 14c:	83 b7       	in	r24, 0x33	; 51
 14e:	83 62       	ori	r24, 0x23	; 35
 150:	83 bf       	out	0x33, r24	; 51
	TCCR0B |= 1<<CS01; // clkI/O/8 (From prescaler)
 152:	83 b7       	in	r24, 0x33	; 51
 154:	82 60       	ori	r24, 0x02	; 2
 156:	83 bf       	out	0x33, r24	; 51
	OCR0B = 10;// initial duty cycle
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	8c bf       	out	0x3c, r24	; 60
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>

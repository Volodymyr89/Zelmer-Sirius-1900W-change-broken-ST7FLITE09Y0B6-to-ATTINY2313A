
Zelmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000634  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  000006a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096c  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a2  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ce  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000369  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002851  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	47 c0       	rjmp	.+142    	; 0x92 <__vector_1>
   4:	55 c0       	rjmp	.+170    	; 0xb0 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	91 c0       	rjmp	.+290    	; 0x12c <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	52 c0       	rjmp	.+164    	; 0xce <__vector_20>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 36       	cpi	r26, 0x65	; 101
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	f5 c2       	rjmp	.+1514   	; 0x630 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:



int main(void)
{	
	Output_Pins_Init();
  48:	57 d1       	rcall	.+686    	; 0x2f8 <Output_Pins_Init>
	Input_Pins_Init();
  4a:	87 d1       	rcall	.+782    	; 0x35a <Input_Pins_Init>
	Timer0_Init();
  4c:	b7 d1       	rcall	.+878    	; 0x3bc <Timer0_Init>
	Timer1_Init();
  4e:	bb d1       	rcall	.+886    	; 0x3c6 <Timer1_Init>
	Soft_Start_and_Run_to_Max();
  50:	30 d1       	rcall	.+608    	; 0x2b2 <Soft_Start_and_Run_to_Max>
    while (1) 
    {
		if(increment_flag){
  52:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <increment_flag>
  56:	88 23       	and	r24, r24
  58:	61 f0       	breq	.+24     	; 0x72 <main+0x2a>
			while(!(PIND&(1<<PIND2))&&((uint8_t)0==Delay_ms(70))){}
  5a:	82 99       	sbic	0x10, 2	; 16
  5c:	04 c0       	rjmp	.+8      	; 0x66 <main+0x1e>
  5e:	86 e4       	ldi	r24, 0x46	; 70
  60:	8e d0       	rcall	.+284    	; 0x17e <Delay_ms>
  62:	88 23       	and	r24, r24
  64:	d1 f3       	breq	.-12     	; 0x5a <main+0x12>
				Increment_decrement_Duty_Cycle(INCREMENT, false);
  66:	60 e0       	ldi	r22, 0x00	; 0
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	a2 d0       	rcall	.+324    	; 0x1b0 <Increment_decrement_Duty_Cycle>
				increment_flag=false;
  6c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <increment_flag>
  70:	f0 cf       	rjmp	.-32     	; 0x52 <main+0xa>
			}
		else if(decrement_flag){
  72:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <decrement_flag>
  76:	88 23       	and	r24, r24
  78:	61 f3       	breq	.-40     	; 0x52 <main+0xa>
			while(!(PIND&(1<<PIND3))&&((uint8_t)0==Delay_ms(70))){}
  7a:	83 99       	sbic	0x10, 3	; 16
  7c:	04 c0       	rjmp	.+8      	; 0x86 <__DATA_REGION_LENGTH__+0x6>
  7e:	86 e4       	ldi	r24, 0x46	; 70
  80:	7e d0       	rcall	.+252    	; 0x17e <Delay_ms>
  82:	88 23       	and	r24, r24
  84:	d1 f3       	breq	.-12     	; 0x7a <main+0x32>
				Increment_decrement_Duty_Cycle(DECREMENT, false);
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	92 d0       	rcall	.+292    	; 0x1b0 <Increment_decrement_Duty_Cycle>
				decrement_flag=false;
  8c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <decrement_flag>
  90:	e0 cf       	rjmp	.-64     	; 0x52 <main+0xa>

00000092 <__vector_1>:
#endif

volatile bool increment_flag=false, decrement_flag=false;
volatile uint16_t dutycyle=0; 

ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	increment_flag=true;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <increment_flag>
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <__vector_2>:

ISR(INT1_vect){
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
	decrement_flag=true;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <decrement_flag>
}
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_20>:

ISR(PCINT2_vect){
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	OCR1A = dutycyle;// set duty cycle;
  f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <dutycyle>
  f4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <dutycyle+0x1>
  f8:	9b bd       	out	0x2b, r25	; 43
  fa:	8a bd       	out	0x2a, r24	; 42
	Timer1_Start();
  fc:	6c d1       	rcall	.+728    	; 0x3d6 <Timer1_Start>
	SET_TMR1OUT0;
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	80 61       	ori	r24, 0x10	; 16
 102:	88 bb       	out	0x18, r24	; 24
	SET_LED5;
 104:	82 b3       	in	r24, 0x12	; 18
 106:	8f 7b       	andi	r24, 0xBF	; 191
 108:	82 bb       	out	0x12, r24	; 18
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_4>:

ISR(TIMER1_COMPA_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	3f 93       	push	r19
 13a:	4f 93       	push	r20
 13c:	5f 93       	push	r21
 13e:	6f 93       	push	r22
 140:	7f 93       	push	r23
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
	Timer1_Stop();
 14e:	47 d1       	rcall	.+654    	; 0x3de <Timer1_Stop>
	RESET_TMR1OUT0;
 150:	88 b3       	in	r24, 0x18	; 24
 152:	8f 7e       	andi	r24, 0xEF	; 239
 154:	88 bb       	out	0x18, r24	; 24
	RESET_LED5;
 156:	82 b3       	in	r24, 0x12	; 18
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	82 bb       	out	0x12, r24	; 18
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <Delay_ms>:

uint8_t Delay_ms(uint8_t delay){
	uint8_t return_status = 1;
	if(delay<=250){
 17e:	8b 3f       	cpi	r24, 0xFB	; 251
 180:	a8 f4       	brcc	.+42     	; 0x1ac <Delay_ms+0x2e>
		uint8_t counterdata= (uint8_t)(delay*0.976);
 182:	68 2f       	mov	r22, r24
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	5b d1       	rcall	.+694    	; 0x442 <__floatsisf>
 18c:	23 e2       	ldi	r18, 0x23	; 35
 18e:	3b ed       	ldi	r19, 0xDB	; 219
 190:	49 e7       	ldi	r20, 0x79	; 121
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	ba d1       	rcall	.+884    	; 0x50a <__mulsf3>
 196:	27 d1       	rcall	.+590    	; 0x3e6 <__fixunssfsi>
		TCNT0 = (255-counterdata);
 198:	60 95       	com	r22
 19a:	62 bf       	out	0x32, r22	; 50
		while(!(TIFR&(1<<TOV0))){}// wait until counter reaches 255
 19c:	08 b6       	in	r0, 0x38	; 56
 19e:	01 fe       	sbrs	r0, 1
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <Delay_ms+0x1e>
		TIFR |= 1<<TOV0;
 1a2:	88 b7       	in	r24, 0x38	; 56
 1a4:	82 60       	ori	r24, 0x02	; 2
 1a6:	88 bf       	out	0x38, r24	; 56
		return_status= 0;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	08 95       	ret
	RESET_TMR1OUT0;
	RESET_LED5;
}

uint8_t Delay_ms(uint8_t delay){
	uint8_t return_status = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
		while(!(TIFR&(1<<TOV0))){}// wait until counter reaches 255
		TIFR |= 1<<TOV0;
		return_status= 0;
		}
	return return_status;
}
 1ae:	08 95       	ret

000001b0 <Increment_decrement_Duty_Cycle>:
}

void Increment_decrement_Duty_Cycle(led_status_t led_status, bool softstart){
	static uint8_t LED=0;
	
	if(led_status == INCREMENT){
 1b0:	81 11       	cpse	r24, r1
 1b2:	2f c0       	rjmp	.+94     	; 0x212 <Increment_decrement_Duty_Cycle+0x62>
		LED++;
 1b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if(LED<=4){
 1be:	85 30       	cpi	r24, 0x05	; 5
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <Increment_decrement_Duty_Cycle+0x14>
 1c2:	76 c0       	rjmp	.+236    	; 0x2b0 <Increment_decrement_Duty_Cycle+0x100>
			switch(LED){
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	69 f0       	breq	.+26     	; 0x1e2 <Increment_decrement_Duty_Cycle+0x32>
 1c8:	18 f4       	brcc	.+6      	; 0x1d0 <Increment_decrement_Duty_Cycle+0x20>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	31 f0       	breq	.+12     	; 0x1da <Increment_decrement_Duty_Cycle+0x2a>
 1ce:	14 c0       	rjmp	.+40     	; 0x1f8 <Increment_decrement_Duty_Cycle+0x48>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	59 f0       	breq	.+22     	; 0x1ea <Increment_decrement_Duty_Cycle+0x3a>
 1d4:	84 30       	cpi	r24, 0x04	; 4
 1d6:	69 f0       	breq	.+26     	; 0x1f2 <Increment_decrement_Duty_Cycle+0x42>
 1d8:	0f c0       	rjmp	.+30     	; 0x1f8 <Increment_decrement_Duty_Cycle+0x48>
				case 1:
				SET_LED1;
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	87 7f       	andi	r24, 0xF7	; 247
 1de:	88 bb       	out	0x18, r24	; 24
				break;
 1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <Increment_decrement_Duty_Cycle+0x48>
				case 2:
				SET_LED2;
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	8b 7f       	andi	r24, 0xFB	; 251
 1e6:	88 bb       	out	0x18, r24	; 24
				break;
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <Increment_decrement_Duty_Cycle+0x48>
				case 3:
				SET_LED3;
 1ea:	88 b3       	in	r24, 0x18	; 24
 1ec:	8d 7f       	andi	r24, 0xFD	; 253
 1ee:	88 bb       	out	0x18, r24	; 24
				break;
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <Increment_decrement_Duty_Cycle+0x48>
				case 4:
				SET_LED4;
 1f2:	88 b3       	in	r24, 0x18	; 24
 1f4:	8e 7f       	andi	r24, 0xFE	; 254
 1f6:	88 bb       	out	0x18, r24	; 24
				break;
			}
			if(softstart==false){
 1f8:	61 11       	cpse	r22, r1
 1fa:	5a c0       	rjmp	.+180    	; 0x2b0 <Increment_decrement_Duty_Cycle+0x100>
				dutycyle+=DUTYCNTRL; // remove for soft start due different step during soft start 
 1fc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <dutycyle>
 200:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <dutycyle+0x1>
 204:	80 53       	subi	r24, 0x30	; 48
 206:	98 4f       	sbci	r25, 0xF8	; 248
 208:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <dutycyle+0x1>
 20c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <dutycyle>
 210:	08 95       	ret
			}
		}
	}
	else if (led_status == DECREMENT){
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	09 f0       	breq	.+2      	; 0x218 <Increment_decrement_Duty_Cycle+0x68>
 216:	4c c0       	rjmp	.+152    	; 0x2b0 <Increment_decrement_Duty_Cycle+0x100>
		if(LED>=1){
 218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21c:	88 23       	and	r24, r24
 21e:	09 f4       	brne	.+2      	; 0x222 <Increment_decrement_Duty_Cycle+0x72>
 220:	47 c0       	rjmp	.+142    	; 0x2b0 <Increment_decrement_Duty_Cycle+0x100>
			switch(LED){
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	b9 f0       	breq	.+46     	; 0x254 <Increment_decrement_Duty_Cycle+0xa4>
 226:	18 f4       	brcc	.+6      	; 0x22e <Increment_decrement_Duty_Cycle+0x7e>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	31 f0       	breq	.+12     	; 0x238 <Increment_decrement_Duty_Cycle+0x88>
 22c:	3c c0       	rjmp	.+120    	; 0x2a6 <Increment_decrement_Duty_Cycle+0xf6>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	f9 f0       	breq	.+62     	; 0x270 <Increment_decrement_Duty_Cycle+0xc0>
 232:	84 30       	cpi	r24, 0x04	; 4
 234:	59 f1       	breq	.+86     	; 0x28c <Increment_decrement_Duty_Cycle+0xdc>
 236:	37 c0       	rjmp	.+110    	; 0x2a6 <Increment_decrement_Duty_Cycle+0xf6>
				case 1:
				dutycyle-=DUTYCNTRL;
 238:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <dutycyle>
 23c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <dutycyle+0x1>
 240:	80 5d       	subi	r24, 0xD0	; 208
 242:	97 40       	sbci	r25, 0x07	; 7
 244:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <dutycyle+0x1>
 248:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <dutycyle>
				RESET_LED1;
 24c:	88 b3       	in	r24, 0x18	; 24
 24e:	88 60       	ori	r24, 0x08	; 8
 250:	88 bb       	out	0x18, r24	; 24
				break;
 252:	29 c0       	rjmp	.+82     	; 0x2a6 <Increment_decrement_Duty_Cycle+0xf6>
				case 2:
				dutycyle-=DUTYCNTRL;
 254:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <dutycyle>
 258:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <dutycyle+0x1>
 25c:	80 5d       	subi	r24, 0xD0	; 208
 25e:	97 40       	sbci	r25, 0x07	; 7
 260:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <dutycyle+0x1>
 264:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <dutycyle>
				RESET_LED2;
 268:	88 b3       	in	r24, 0x18	; 24
 26a:	84 60       	ori	r24, 0x04	; 4
 26c:	88 bb       	out	0x18, r24	; 24
				break;
 26e:	1b c0       	rjmp	.+54     	; 0x2a6 <Increment_decrement_Duty_Cycle+0xf6>
				case 3:
				dutycyle-=DUTYCNTRL;
 270:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <dutycyle>
 274:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <dutycyle+0x1>
 278:	80 5d       	subi	r24, 0xD0	; 208
 27a:	97 40       	sbci	r25, 0x07	; 7
 27c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <dutycyle+0x1>
 280:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <dutycyle>
				RESET_LED3;
 284:	88 b3       	in	r24, 0x18	; 24
 286:	82 60       	ori	r24, 0x02	; 2
 288:	88 bb       	out	0x18, r24	; 24
				break;
 28a:	0d c0       	rjmp	.+26     	; 0x2a6 <Increment_decrement_Duty_Cycle+0xf6>
				case 4:
				dutycyle-=DUTYCNTRL;
 28c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <dutycyle>
 290:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <dutycyle+0x1>
 294:	80 5d       	subi	r24, 0xD0	; 208
 296:	97 40       	sbci	r25, 0x07	; 7
 298:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <dutycyle+0x1>
 29c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <dutycyle>
				RESET_LED4;
 2a0:	88 b3       	in	r24, 0x18	; 24
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	88 bb       	out	0x18, r24	; 24
				break;
			}
			LED--;
 2a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2aa:	81 50       	subi	r24, 0x01	; 1
 2ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b0:	08 95       	ret

000002b2 <Soft_Start_and_Run_to_Max>:
		}
	return return_status;
}


void Soft_Start_and_Run_to_Max(void){
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
	uint8_t cnt=0;
	SET_LED0;// turn ON LED0
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	8f 7d       	andi	r24, 0xDF	; 223
 2ba:	82 bb       	out	0x12, r24	; 18
	for(uint8_t step=0; step<CYCLENUM; step++){
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
	return return_status;
}


void Soft_Start_and_Run_to_Max(void){
	uint8_t cnt=0;
 2be:	d0 e0       	ldi	r29, 0x00	; 0
	SET_LED0;// turn ON LED0
	for(uint8_t step=0; step<CYCLENUM; step++){
 2c0:	16 c0       	rjmp	.+44     	; 0x2ee <Soft_Start_and_Run_to_Max+0x3c>
			if((uint8_t)0 == Delay_ms(200)){
 2c2:	88 ec       	ldi	r24, 0xC8	; 200
 2c4:	5c df       	rcall	.-328    	; 0x17e <Delay_ms>
 2c6:	81 11       	cpse	r24, r1
 2c8:	11 c0       	rjmp	.+34     	; 0x2ec <Soft_Start_and_Run_to_Max+0x3a>
				dutycyle+=DUTYSOFTSTART;
 2ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <dutycyle>
 2ce:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <dutycyle+0x1>
 2d2:	8c 50       	subi	r24, 0x0C	; 12
 2d4:	9e 4f       	sbci	r25, 0xFE	; 254
 2d6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <dutycyle+0x1>
 2da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <dutycyle>
				cnt++;
 2de:	df 5f       	subi	r29, 0xFF	; 255
				if(cnt>=5){
 2e0:	d5 30       	cpi	r29, 0x05	; 5
 2e2:	20 f0       	brcs	.+8      	; 0x2ec <Soft_Start_and_Run_to_Max+0x3a>
					Increment_decrement_Duty_Cycle(INCREMENT, true);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	63 df       	rcall	.-314    	; 0x1b0 <Increment_decrement_Duty_Cycle>
					cnt=0;
 2ea:	d0 e0       	ldi	r29, 0x00	; 0


void Soft_Start_and_Run_to_Max(void){
	uint8_t cnt=0;
	SET_LED0;// turn ON LED0
	for(uint8_t step=0; step<CYCLENUM; step++){
 2ec:	cf 5f       	subi	r28, 0xFF	; 255
 2ee:	c4 31       	cpi	r28, 0x14	; 20
 2f0:	40 f3       	brcs	.-48     	; 0x2c2 <Soft_Start_and_Run_to_Max+0x10>
					Increment_decrement_Duty_Cycle(INCREMENT, true);
					cnt=0;
				}
			}
		}
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <Output_Pins_Init>:


// init output PINs
void Output_Pins_Init(void){
// PWM output
	 DDRB |= (1 << DDB4); // as output for TMR1 PWM
 2f8:	87 b3       	in	r24, 0x17	; 23
 2fa:	80 61       	ori	r24, 0x10	; 16
 2fc:	87 bb       	out	0x17, r24	; 23
	  RESET_TMR1OUT0;// set to zero
 2fe:	88 b3       	in	r24, 0x18	; 24
 300:	8f 7e       	andi	r24, 0xEF	; 239
 302:	88 bb       	out	0x18, r24	; 24
// set LEDs indicating power
	DDRD |= (1 << DDD5); // LED0
 304:	81 b3       	in	r24, 0x11	; 17
 306:	80 62       	ori	r24, 0x20	; 32
 308:	81 bb       	out	0x11, r24	; 17
	  RESET_LED4;// set to zero
 30a:	88 b3       	in	r24, 0x18	; 24
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB3); // LED1
 310:	87 b3       	in	r24, 0x17	; 23
 312:	88 60       	ori	r24, 0x08	; 8
 314:	87 bb       	out	0x17, r24	; 23
	  RESET_LED3;// set to zero
 316:	88 b3       	in	r24, 0x18	; 24
 318:	82 60       	ori	r24, 0x02	; 2
 31a:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB2); // LED2
 31c:	87 b3       	in	r24, 0x17	; 23
 31e:	84 60       	ori	r24, 0x04	; 4
 320:	87 bb       	out	0x17, r24	; 23
	  RESET_LED2;// set to zero
 322:	88 b3       	in	r24, 0x18	; 24
 324:	84 60       	ori	r24, 0x04	; 4
 326:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB1); // LED3
 328:	87 b3       	in	r24, 0x17	; 23
 32a:	82 60       	ori	r24, 0x02	; 2
 32c:	87 bb       	out	0x17, r24	; 23
	  RESET_LED1;// set to zero
 32e:	88 b3       	in	r24, 0x18	; 24
 330:	88 60       	ori	r24, 0x08	; 8
 332:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB0); // LED4
 334:	87 b3       	in	r24, 0x17	; 23
 336:	81 60       	ori	r24, 0x01	; 1
 338:	87 bb       	out	0x17, r24	; 23
	  RESET_LED0;// set to zero
 33a:	82 b3       	in	r24, 0x12	; 18
 33c:	80 62       	ori	r24, 0x20	; 32
 33e:	82 bb       	out	0x12, r24	; 18
	 //another set of LEDs indicating filters statuses
	 DDRD |= (1 << DDD6); // LED5
 340:	81 b3       	in	r24, 0x11	; 17
 342:	80 64       	ori	r24, 0x40	; 64
 344:	81 bb       	out	0x11, r24	; 17
	  RESET_LED5;// set to zero
 346:	82 b3       	in	r24, 0x12	; 18
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	82 bb       	out	0x12, r24	; 18
	 DDRD |= (1 << DDD4); // LED6
 34c:	81 b3       	in	r24, 0x11	; 17
 34e:	80 61       	ori	r24, 0x10	; 16
 350:	81 bb       	out	0x11, r24	; 17
	  RESET_LED6;// set to zero
 352:	82 b3       	in	r24, 0x12	; 18
 354:	80 61       	ori	r24, 0x10	; 16
 356:	82 bb       	out	0x12, r24	; 18
 358:	08 95       	ret

0000035a <Input_Pins_Init>:
}

// init input PINs
void Input_Pins_Init(void){
	//pins for min/max buttons
	DDRD &= ~(1 << DDD2); // PD2 as input for ext interrupt
 35a:	81 b3       	in	r24, 0x11	; 17
 35c:	8b 7f       	andi	r24, 0xFB	; 251
 35e:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD2; // pull up
 360:	82 b3       	in	r24, 0x12	; 18
 362:	84 60       	ori	r24, 0x04	; 4
 364:	82 bb       	out	0x12, r24	; 18
	DDRD &= ~(1 << DDD3); // PD3 as input for ext interrupt
 366:	81 b3       	in	r24, 0x11	; 17
 368:	87 7f       	andi	r24, 0xF7	; 247
 36a:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD3; // pull up
 36c:	82 b3       	in	r24, 0x12	; 18
 36e:	88 60       	ori	r24, 0x08	; 8
 370:	82 bb       	out	0x12, r24	; 18
	//pins for filter sensors
	DDRD &= ~(1 << DDD1); // PD2 as input for ext interrupt
 372:	81 b3       	in	r24, 0x11	; 17
 374:	8d 7f       	andi	r24, 0xFD	; 253
 376:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD1; // pull up
 378:	82 b3       	in	r24, 0x12	; 18
 37a:	82 60       	ori	r24, 0x02	; 2
 37c:	82 bb       	out	0x12, r24	; 18
	DDRA &= ~(1 << DDA1); // PD2 as input for ext interrupt
 37e:	8a b3       	in	r24, 0x1a	; 26
 380:	8d 7f       	andi	r24, 0xFD	; 253
 382:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 1 << PORTA1; // pull up	
 384:	8b b3       	in	r24, 0x1b	; 27
 386:	82 60       	ori	r24, 0x02	; 2
 388:	8b bb       	out	0x1b, r24	; 27
	
	//pin for ZCD
	DDRD &= ~(1 << DDD0); // PD0 as input for zero cross detector
 38a:	81 b3       	in	r24, 0x11	; 17
 38c:	8e 7f       	andi	r24, 0xFE	; 254
 38e:	81 bb       	out	0x11, r24	; 17
	// Configure ext interrupt
	PCMSK2 |= 1<<PCINT11;
 390:	85 b1       	in	r24, 0x05	; 5
 392:	81 60       	ori	r24, 0x01	; 1
 394:	85 b9       	out	0x05, r24	; 5
	GIMSK |= 1<<PCIE2;
 396:	8b b7       	in	r24, 0x3b	; 59
 398:	80 61       	ori	r24, 0x10	; 16
 39a:	8b bf       	out	0x3b, r24	; 59
	
	// Configure INT0 to trigger on falling edge
	MCUCR |= (1 << ISC01);
 39c:	85 b7       	in	r24, 0x35	; 53
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
 3a2:	85 b7       	in	r24, 0x35	; 53
 3a4:	8e 7f       	andi	r24, 0xFE	; 254
 3a6:	85 bf       	out	0x35, r24	; 53
	// Configure INT1 to trigger on falling edge
	MCUCR |= (1 << ISC11);
 3a8:	85 b7       	in	r24, 0x35	; 53
 3aa:	88 60       	ori	r24, 0x08	; 8
 3ac:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
 3ae:	85 b7       	in	r24, 0x35	; 53
 3b0:	8b 7f       	andi	r24, 0xFB	; 251
 3b2:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT0) | (1<<INT1);// enable interrupts
 3b4:	8b b7       	in	r24, 0x3b	; 59
 3b6:	80 6c       	ori	r24, 0xC0	; 192
 3b8:	8b bf       	out	0x3b, r24	; 59
 3ba:	08 95       	ret

000003bc <Timer0_Init>:
}

// init timers
void Timer0_Init(void){
	TCNT0 = 0;
 3bc:	12 be       	out	0x32, r1	; 50
	TCCR0B |= 1<<CS02 |1<<CS00; // clkI/O/1024 (From prescaler)
 3be:	83 b7       	in	r24, 0x33	; 51
 3c0:	85 60       	ori	r24, 0x05	; 5
 3c2:	83 bf       	out	0x33, r24	; 51
 3c4:	08 95       	ret

000003c6 <Timer1_Init>:

}

void Timer1_Init(void){
	 TCCR1B |= (1<<WGM12);  //CTC OCR1A, 
 3c6:	8e b5       	in	r24, 0x2e	; 46
 3c8:	88 60       	ori	r24, 0x08	; 8
 3ca:	8e bd       	out	0x2e, r24	; 46
	 TIMSK |= (1 << OCIE1A);
 3cc:	89 b7       	in	r24, 0x39	; 57
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	89 bf       	out	0x39, r24	; 57
	 sei();//enable global interrupts
 3d2:	78 94       	sei
 3d4:	08 95       	ret

000003d6 <Timer1_Start>:

}

void Timer1_Start(void){
	 TCCR1B |= 1<<CS10;// clkI/O/1 (No prescaling)
 3d6:	8e b5       	in	r24, 0x2e	; 46
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	8e bd       	out	0x2e, r24	; 46
 3dc:	08 95       	ret

000003de <Timer1_Stop>:
}

void Timer1_Stop(void){
	TCCR1B &= ~(1<<CS10);//clkI/O/1 (No prescaling)
 3de:	8e b5       	in	r24, 0x2e	; 46
 3e0:	8e 7f       	andi	r24, 0xFE	; 254
 3e2:	8e bd       	out	0x2e, r24	; 46
 3e4:	08 95       	ret

000003e6 <__fixunssfsi>:
 3e6:	70 d0       	rcall	.+224    	; 0x4c8 <__fp_splitA>
 3e8:	88 f0       	brcs	.+34     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ea:	9f 57       	subi	r25, 0x7F	; 127
 3ec:	90 f0       	brcs	.+36     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ee:	b9 2f       	mov	r27, r25
 3f0:	99 27       	eor	r25, r25
 3f2:	b7 51       	subi	r27, 0x17	; 23
 3f4:	a0 f0       	brcs	.+40     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f6:	d1 f0       	breq	.+52     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	1a f0       	brmi	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	ba 95       	dec	r27
 404:	c9 f7       	brne	.-14     	; 0x3f8 <__fixunssfsi+0x12>
 406:	12 c0       	rjmp	.+36     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 408:	b1 30       	cpi	r27, 0x01	; 1
 40a:	81 f0       	breq	.+32     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 40c:	77 d0       	rcall	.+238    	; 0x4fc <__fp_zero>
 40e:	b1 e0       	ldi	r27, 0x01	; 1
 410:	08 95       	ret
 412:	74 c0       	rjmp	.+232    	; 0x4fc <__fp_zero>
 414:	67 2f       	mov	r22, r23
 416:	78 2f       	mov	r23, r24
 418:	88 27       	eor	r24, r24
 41a:	b8 5f       	subi	r27, 0xF8	; 248
 41c:	39 f0       	breq	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41e:	b9 3f       	cpi	r27, 0xF9	; 249
 420:	cc f3       	brlt	.-14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 422:	86 95       	lsr	r24
 424:	77 95       	ror	r23
 426:	67 95       	ror	r22
 428:	b3 95       	inc	r27
 42a:	d9 f7       	brne	.-10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42c:	3e f4       	brtc	.+14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 42e:	90 95       	com	r25
 430:	80 95       	com	r24
 432:	70 95       	com	r23
 434:	61 95       	neg	r22
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	08 95       	ret

0000043e <__floatunsisf>:
 43e:	e8 94       	clt
 440:	09 c0       	rjmp	.+18     	; 0x454 <__floatsisf+0x12>

00000442 <__floatsisf>:
 442:	97 fb       	bst	r25, 7
 444:	3e f4       	brtc	.+14     	; 0x454 <__floatsisf+0x12>
 446:	90 95       	com	r25
 448:	80 95       	com	r24
 44a:	70 95       	com	r23
 44c:	61 95       	neg	r22
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	8f 4f       	sbci	r24, 0xFF	; 255
 452:	9f 4f       	sbci	r25, 0xFF	; 255
 454:	99 23       	and	r25, r25
 456:	a9 f0       	breq	.+42     	; 0x482 <__floatsisf+0x40>
 458:	f9 2f       	mov	r31, r25
 45a:	96 e9       	ldi	r25, 0x96	; 150
 45c:	bb 27       	eor	r27, r27
 45e:	93 95       	inc	r25
 460:	f6 95       	lsr	r31
 462:	87 95       	ror	r24
 464:	77 95       	ror	r23
 466:	67 95       	ror	r22
 468:	b7 95       	ror	r27
 46a:	f1 11       	cpse	r31, r1
 46c:	f8 cf       	rjmp	.-16     	; 0x45e <__floatsisf+0x1c>
 46e:	fa f4       	brpl	.+62     	; 0x4ae <__floatsisf+0x6c>
 470:	bb 0f       	add	r27, r27
 472:	11 f4       	brne	.+4      	; 0x478 <__floatsisf+0x36>
 474:	60 ff       	sbrs	r22, 0
 476:	1b c0       	rjmp	.+54     	; 0x4ae <__floatsisf+0x6c>
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	16 c0       	rjmp	.+44     	; 0x4ae <__floatsisf+0x6c>
 482:	88 23       	and	r24, r24
 484:	11 f0       	breq	.+4      	; 0x48a <__floatsisf+0x48>
 486:	96 e9       	ldi	r25, 0x96	; 150
 488:	11 c0       	rjmp	.+34     	; 0x4ac <__floatsisf+0x6a>
 48a:	77 23       	and	r23, r23
 48c:	21 f0       	breq	.+8      	; 0x496 <__floatsisf+0x54>
 48e:	9e e8       	ldi	r25, 0x8E	; 142
 490:	87 2f       	mov	r24, r23
 492:	76 2f       	mov	r23, r22
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <__floatsisf+0x5e>
 496:	66 23       	and	r22, r22
 498:	71 f0       	breq	.+28     	; 0x4b6 <__floatsisf+0x74>
 49a:	96 e8       	ldi	r25, 0x86	; 134
 49c:	86 2f       	mov	r24, r22
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	2a f0       	brmi	.+10     	; 0x4ae <__floatsisf+0x6c>
 4a4:	9a 95       	dec	r25
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	da f7       	brpl	.-10     	; 0x4a4 <__floatsisf+0x62>
 4ae:	88 0f       	add	r24, r24
 4b0:	96 95       	lsr	r25
 4b2:	87 95       	ror	r24
 4b4:	97 f9       	bld	r25, 7
 4b6:	08 95       	ret

000004b8 <__fp_split3>:
 4b8:	57 fd       	sbrc	r21, 7
 4ba:	90 58       	subi	r25, 0x80	; 128
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <__fp_splitA+0x10>
 4c2:	5f 3f       	cpi	r21, 0xFF	; 255
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <__fp_splitA+0x1a>
 4c6:	47 95       	ror	r20

000004c8 <__fp_splitA>:
 4c8:	88 0f       	add	r24, r24
 4ca:	97 fb       	bst	r25, 7
 4cc:	99 1f       	adc	r25, r25
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <__fp_splitA+0x20>
 4d0:	9f 3f       	cpi	r25, 0xFF	; 255
 4d2:	79 f0       	breq	.+30     	; 0x4f2 <__fp_splitA+0x2a>
 4d4:	87 95       	ror	r24
 4d6:	08 95       	ret
 4d8:	12 16       	cp	r1, r18
 4da:	13 06       	cpc	r1, r19
 4dc:	14 06       	cpc	r1, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	f2 cf       	rjmp	.-28     	; 0x4c6 <__fp_split3+0xe>
 4e2:	46 95       	lsr	r20
 4e4:	f1 df       	rcall	.-30     	; 0x4c8 <__fp_splitA>
 4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <__fp_splitA+0x30>
 4e8:	16 16       	cp	r1, r22
 4ea:	17 06       	cpc	r1, r23
 4ec:	18 06       	cpc	r1, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	f1 cf       	rjmp	.-30     	; 0x4d4 <__fp_splitA+0xc>
 4f2:	86 95       	lsr	r24
 4f4:	71 05       	cpc	r23, r1
 4f6:	61 05       	cpc	r22, r1
 4f8:	08 94       	sec
 4fa:	08 95       	ret

000004fc <__fp_zero>:
 4fc:	e8 94       	clt

000004fe <__fp_szero>:
 4fe:	bb 27       	eor	r27, r27
 500:	66 27       	eor	r22, r22
 502:	77 27       	eor	r23, r23
 504:	cb 01       	movw	r24, r22
 506:	97 f9       	bld	r25, 7
 508:	08 95       	ret

0000050a <__mulsf3>:
 50a:	0a d0       	rcall	.+20     	; 0x520 <__mulsf3x>
 50c:	80 c0       	rjmp	.+256    	; 0x60e <__fp_round>
 50e:	71 d0       	rcall	.+226    	; 0x5f2 <__fp_pscA>
 510:	28 f0       	brcs	.+10     	; 0x51c <__mulsf3+0x12>
 512:	76 d0       	rcall	.+236    	; 0x600 <__fp_pscB>
 514:	18 f0       	brcs	.+6      	; 0x51c <__mulsf3+0x12>
 516:	95 23       	and	r25, r21
 518:	09 f0       	breq	.+2      	; 0x51c <__mulsf3+0x12>
 51a:	62 c0       	rjmp	.+196    	; 0x5e0 <__fp_inf>
 51c:	67 c0       	rjmp	.+206    	; 0x5ec <__fp_nan>
 51e:	ef cf       	rjmp	.-34     	; 0x4fe <__fp_szero>

00000520 <__mulsf3x>:
 520:	cb df       	rcall	.-106    	; 0x4b8 <__fp_split3>
 522:	a8 f3       	brcs	.-22     	; 0x50e <__mulsf3+0x4>

00000524 <__mulsf3_pse>:
 524:	99 23       	and	r25, r25
 526:	d9 f3       	breq	.-10     	; 0x51e <__mulsf3+0x14>
 528:	55 23       	and	r21, r21
 52a:	c9 f3       	breq	.-14     	; 0x51e <__mulsf3+0x14>
 52c:	95 0f       	add	r25, r21
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	55 1f       	adc	r21, r21
 532:	aa 27       	eor	r26, r26
 534:	ee 27       	eor	r30, r30
 536:	ff 27       	eor	r31, r31
 538:	bb 27       	eor	r27, r27
 53a:	00 24       	eor	r0, r0
 53c:	08 94       	sec
 53e:	67 95       	ror	r22
 540:	20 f4       	brcc	.+8      	; 0x54a <__mulsf3_pse+0x26>
 542:	e2 0f       	add	r30, r18
 544:	f3 1f       	adc	r31, r19
 546:	b4 1f       	adc	r27, r20
 548:	0a 1e       	adc	r0, r26
 54a:	22 0f       	add	r18, r18
 54c:	33 1f       	adc	r19, r19
 54e:	44 1f       	adc	r20, r20
 550:	aa 1f       	adc	r26, r26
 552:	66 95       	lsr	r22
 554:	a9 f7       	brne	.-22     	; 0x540 <__mulsf3_pse+0x1c>
 556:	77 95       	ror	r23
 558:	30 f4       	brcc	.+12     	; 0x566 <__mulsf3_pse+0x42>
 55a:	f3 0f       	add	r31, r19
 55c:	b4 1f       	adc	r27, r20
 55e:	0a 1e       	adc	r0, r26
 560:	12 1e       	adc	r1, r18
 562:	08 f4       	brcc	.+2      	; 0x566 <__mulsf3_pse+0x42>
 564:	63 95       	inc	r22
 566:	33 0f       	add	r19, r19
 568:	44 1f       	adc	r20, r20
 56a:	aa 1f       	adc	r26, r26
 56c:	22 1f       	adc	r18, r18
 56e:	76 95       	lsr	r23
 570:	99 f7       	brne	.-26     	; 0x558 <__mulsf3_pse+0x34>
 572:	87 95       	ror	r24
 574:	20 f4       	brcc	.+8      	; 0x57e <__mulsf3_pse+0x5a>
 576:	b4 0f       	add	r27, r20
 578:	0a 1e       	adc	r0, r26
 57a:	12 1e       	adc	r1, r18
 57c:	63 1f       	adc	r22, r19
 57e:	44 0f       	add	r20, r20
 580:	aa 1f       	adc	r26, r26
 582:	22 1f       	adc	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	86 95       	lsr	r24
 588:	a9 f7       	brne	.-22     	; 0x574 <__mulsf3_pse+0x50>
 58a:	86 2f       	mov	r24, r22
 58c:	71 2d       	mov	r23, r1
 58e:	60 2d       	mov	r22, r0
 590:	11 24       	eor	r1, r1
 592:	9f 57       	subi	r25, 0x7F	; 127
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	8a f0       	brmi	.+34     	; 0x5ba <__mulsf3_pse+0x96>
 598:	e1 f0       	breq	.+56     	; 0x5d2 <__mulsf3_pse+0xae>
 59a:	88 23       	and	r24, r24
 59c:	4a f0       	brmi	.+18     	; 0x5b0 <__mulsf3_pse+0x8c>
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	bb 1f       	adc	r27, r27
 5a4:	66 1f       	adc	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	88 1f       	adc	r24, r24
 5aa:	91 50       	subi	r25, 0x01	; 1
 5ac:	50 40       	sbci	r21, 0x00	; 0
 5ae:	a9 f7       	brne	.-22     	; 0x59a <__mulsf3_pse+0x76>
 5b0:	9e 3f       	cpi	r25, 0xFE	; 254
 5b2:	51 05       	cpc	r21, r1
 5b4:	70 f0       	brcs	.+28     	; 0x5d2 <__mulsf3_pse+0xae>
 5b6:	14 c0       	rjmp	.+40     	; 0x5e0 <__fp_inf>
 5b8:	a2 cf       	rjmp	.-188    	; 0x4fe <__fp_szero>
 5ba:	5f 3f       	cpi	r21, 0xFF	; 255
 5bc:	ec f3       	brlt	.-6      	; 0x5b8 <__mulsf3_pse+0x94>
 5be:	98 3e       	cpi	r25, 0xE8	; 232
 5c0:	dc f3       	brlt	.-10     	; 0x5b8 <__mulsf3_pse+0x94>
 5c2:	86 95       	lsr	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b7 95       	ror	r27
 5ca:	f7 95       	ror	r31
 5cc:	e7 95       	ror	r30
 5ce:	9f 5f       	subi	r25, 0xFF	; 255
 5d0:	c1 f7       	brne	.-16     	; 0x5c2 <__mulsf3_pse+0x9e>
 5d2:	fe 2b       	or	r31, r30
 5d4:	88 0f       	add	r24, r24
 5d6:	91 1d       	adc	r25, r1
 5d8:	96 95       	lsr	r25
 5da:	87 95       	ror	r24
 5dc:	97 f9       	bld	r25, 7
 5de:	08 95       	ret

000005e0 <__fp_inf>:
 5e0:	97 f9       	bld	r25, 7
 5e2:	9f 67       	ori	r25, 0x7F	; 127
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	08 95       	ret

000005ec <__fp_nan>:
 5ec:	9f ef       	ldi	r25, 0xFF	; 255
 5ee:	80 ec       	ldi	r24, 0xC0	; 192
 5f0:	08 95       	ret

000005f2 <__fp_pscA>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	16 16       	cp	r1, r22
 5f8:	17 06       	cpc	r1, r23
 5fa:	18 06       	cpc	r1, r24
 5fc:	09 06       	cpc	r0, r25
 5fe:	08 95       	ret

00000600 <__fp_pscB>:
 600:	00 24       	eor	r0, r0
 602:	0a 94       	dec	r0
 604:	12 16       	cp	r1, r18
 606:	13 06       	cpc	r1, r19
 608:	14 06       	cpc	r1, r20
 60a:	05 06       	cpc	r0, r21
 60c:	08 95       	ret

0000060e <__fp_round>:
 60e:	09 2e       	mov	r0, r25
 610:	03 94       	inc	r0
 612:	00 0c       	add	r0, r0
 614:	11 f4       	brne	.+4      	; 0x61a <__fp_round+0xc>
 616:	88 23       	and	r24, r24
 618:	52 f0       	brmi	.+20     	; 0x62e <__fp_round+0x20>
 61a:	bb 0f       	add	r27, r27
 61c:	40 f4       	brcc	.+16     	; 0x62e <__fp_round+0x20>
 61e:	bf 2b       	or	r27, r31
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0x18>
 622:	60 ff       	sbrs	r22, 0
 624:	04 c0       	rjmp	.+8      	; 0x62e <__fp_round+0x20>
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <_exit>:
 630:	f8 94       	cli

00000632 <__stop_program>:
 632:	ff cf       	rjmp	.-2      	; 0x632 <__stop_program>


Zelmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004b8  0000054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  0000054e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000888  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d0  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000423  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a4  00000000  00000000  00002037  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	4f c0       	rjmp	.+158    	; 0xa2 <__vector_1>
   4:	5d c0       	rjmp	.+186    	; 0xc0 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 eb       	ldi	r30, 0xB8	; 184
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	2c c2       	rjmp	.+1112   	; 0x4b4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:



int main(void)
{	
	Output_Pins_Init();
  5e:	b5 d0       	rcall	.+362    	; 0x1ca <Output_Pins_Init>
	Input_Pins_Init();
  60:	e2 d0       	rcall	.+452    	; 0x226 <Input_Pins_Init>
	Timer0_Init();
  62:	fe d0       	rcall	.+508    	; 0x260 <Timer0_Init>
	Soft_Start_and_Run_to_Max();
  64:	a2 d0       	rcall	.+324    	; 0x1aa <Soft_Start_and_Run_to_Max>
    while (1) 
    {
		if(increment_flag){
  66:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <increment_flag>
  6a:	88 23       	and	r24, r24
  6c:	59 f0       	breq	.+22     	; 0x84 <__DATA_REGION_LENGTH__+0x4>
			while(!(PIND&(1<<PIND2))&&((uint8_t)0==Delay_ms(100))){}
  6e:	82 99       	sbic	0x10, 2	; 16
  70:	04 c0       	rjmp	.+8      	; 0x7a <main+0x1c>
  72:	84 e6       	ldi	r24, 0x64	; 100
  74:	34 d0       	rcall	.+104    	; 0xde <Delay_ms>
  76:	88 23       	and	r24, r24
  78:	d1 f3       	breq	.-12     	; 0x6e <main+0x10>
				Increment_decrement_Duty_Cycle(INCREMENT);
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	49 d0       	rcall	.+146    	; 0x110 <Increment_decrement_Duty_Cycle>
				increment_flag=false;
  7e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <increment_flag>
  82:	f1 cf       	rjmp	.-30     	; 0x66 <main+0x8>
			}
		else if(decrement_flag){
  84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  88:	88 23       	and	r24, r24
  8a:	69 f3       	breq	.-38     	; 0x66 <main+0x8>
			while(!(PIND&(1<<PIND3))&&((uint8_t)0==Delay_ms(100))){}
  8c:	83 99       	sbic	0x10, 3	; 16
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__DATA_REGION_LENGTH__+0x18>
  90:	84 e6       	ldi	r24, 0x64	; 100
  92:	25 d0       	rcall	.+74     	; 0xde <Delay_ms>
  94:	88 23       	and	r24, r24
  96:	d1 f3       	breq	.-12     	; 0x8c <__DATA_REGION_LENGTH__+0xc>
				Increment_decrement_Duty_Cycle(DECREMENT);
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	3a d0       	rcall	.+116    	; 0x110 <Increment_decrement_Duty_Cycle>
				decrement_flag=false;
  9c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
  a0:	e2 cf       	rjmp	.-60     	; 0x66 <main+0x8>

000000a2 <__vector_1>:
	#define CYCLENUM 5
#endif

volatile bool increment_flag=false, decrement_flag=false;

ISR(INT0_vect){
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
	increment_flag=true;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <increment_flag>
}
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_2>:

ISR(INT1_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
	decrement_flag=true;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
}
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <Delay_ms>:


uint8_t Delay_ms(uint8_t delay){
	uint8_t return_status = 1;
	if(delay<=250){
  de:	8b 3f       	cpi	r24, 0xFB	; 251
  e0:	a8 f4       	brcc	.+42     	; 0x10c <__stack+0x2d>
		uint8_t counterdata= (uint8_t)(delay*0.976);
  e2:	68 2f       	mov	r22, r24
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	ed d0       	rcall	.+474    	; 0x2c6 <__floatsisf>
  ec:	23 e2       	ldi	r18, 0x23	; 35
  ee:	3b ed       	ldi	r19, 0xDB	; 219
  f0:	49 e7       	ldi	r20, 0x79	; 121
  f2:	5f e3       	ldi	r21, 0x3F	; 63
  f4:	4c d1       	rcall	.+664    	; 0x38e <__mulsf3>
  f6:	b9 d0       	rcall	.+370    	; 0x26a <__fixunssfsi>
		TCNT0 = (255-counterdata);
  f8:	60 95       	com	r22
  fa:	62 bf       	out	0x32, r22	; 50
		while(!(TIFR&(1<<TOV0))){}// wait until counter reaches 255
  fc:	08 b6       	in	r0, 0x38	; 56
  fe:	01 fe       	sbrs	r0, 1
 100:	fd cf       	rjmp	.-6      	; 0xfc <__stack+0x1d>
		TIFR |= 1<<TOV0;
 102:	88 b7       	in	r24, 0x38	; 56
 104:	82 60       	ori	r24, 0x02	; 2
 106:	88 bf       	out	0x38, r24	; 56
		return_status= 0;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
	decrement_flag=true;
}


uint8_t Delay_ms(uint8_t delay){
	uint8_t return_status = 1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
		while(!(TIFR&(1<<TOV0))){}// wait until counter reaches 255
		TIFR |= 1<<TOV0;
		return_status= 0;
		}
	return return_status;
}
 10e:	08 95       	ret

00000110 <Increment_decrement_Duty_Cycle>:
}

void Increment_decrement_Duty_Cycle(led_status_t led_status){
	static uint8_t LED=1;
	
	if(led_status == INCREMENT){
 110:	81 11       	cpse	r24, r1
 112:	25 c0       	rjmp	.+74     	; 0x15e <Increment_decrement_Duty_Cycle+0x4e>
		if(LED<=4){
 114:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	85 30       	cpi	r24, 0x05	; 5
 11a:	08 f0       	brcs	.+2      	; 0x11e <Increment_decrement_Duty_Cycle+0xe>
 11c:	45 c0       	rjmp	.+138    	; 0x1a8 <Increment_decrement_Duty_Cycle+0x98>
			switch(LED){
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	69 f0       	breq	.+26     	; 0x13c <Increment_decrement_Duty_Cycle+0x2c>
 122:	18 f4       	brcc	.+6      	; 0x12a <Increment_decrement_Duty_Cycle+0x1a>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	31 f0       	breq	.+12     	; 0x134 <Increment_decrement_Duty_Cycle+0x24>
 128:	14 c0       	rjmp	.+40     	; 0x152 <Increment_decrement_Duty_Cycle+0x42>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	59 f0       	breq	.+22     	; 0x144 <Increment_decrement_Duty_Cycle+0x34>
 12e:	84 30       	cpi	r24, 0x04	; 4
 130:	69 f0       	breq	.+26     	; 0x14c <Increment_decrement_Duty_Cycle+0x3c>
 132:	0f c0       	rjmp	.+30     	; 0x152 <Increment_decrement_Duty_Cycle+0x42>
				case 1:
				SET_LED1;
 134:	88 b3       	in	r24, 0x18	; 24
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	88 bb       	out	0x18, r24	; 24
				break;
 13a:	0b c0       	rjmp	.+22     	; 0x152 <Increment_decrement_Duty_Cycle+0x42>
				case 2:
				SET_LED2;
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	88 bb       	out	0x18, r24	; 24
				break;
 142:	07 c0       	rjmp	.+14     	; 0x152 <Increment_decrement_Duty_Cycle+0x42>
				case 3:
				SET_LED3;
 144:	88 b3       	in	r24, 0x18	; 24
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	88 bb       	out	0x18, r24	; 24
				break;
 14a:	03 c0       	rjmp	.+6      	; 0x152 <Increment_decrement_Duty_Cycle+0x42>
				case 4:
				SET_LED4;
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	88 bb       	out	0x18, r24	; 24
				break;
			}
			LED++;
 152:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	08 95       	ret
		}
	}
	else if (led_status == DECREMENT){
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	19 f5       	brne	.+70     	; 0x1a8 <Increment_decrement_Duty_Cycle+0x98>
		if(LED>=1){
 162:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 166:	88 23       	and	r24, r24
 168:	f9 f0       	breq	.+62     	; 0x1a8 <Increment_decrement_Duty_Cycle+0x98>
			switch(LED){
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	69 f0       	breq	.+26     	; 0x188 <Increment_decrement_Duty_Cycle+0x78>
 16e:	18 f4       	brcc	.+6      	; 0x176 <Increment_decrement_Duty_Cycle+0x66>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	31 f0       	breq	.+12     	; 0x180 <Increment_decrement_Duty_Cycle+0x70>
 174:	14 c0       	rjmp	.+40     	; 0x19e <Increment_decrement_Duty_Cycle+0x8e>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	59 f0       	breq	.+22     	; 0x190 <Increment_decrement_Duty_Cycle+0x80>
 17a:	84 30       	cpi	r24, 0x04	; 4
 17c:	69 f0       	breq	.+26     	; 0x198 <Increment_decrement_Duty_Cycle+0x88>
 17e:	0f c0       	rjmp	.+30     	; 0x19e <Increment_decrement_Duty_Cycle+0x8e>
				case 1:
				RESET_LED1;
 180:	88 b3       	in	r24, 0x18	; 24
 182:	88 60       	ori	r24, 0x08	; 8
 184:	88 bb       	out	0x18, r24	; 24
				break;
 186:	0b c0       	rjmp	.+22     	; 0x19e <Increment_decrement_Duty_Cycle+0x8e>
				case 2:
				RESET_LED2;
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	88 bb       	out	0x18, r24	; 24
				break;
 18e:	07 c0       	rjmp	.+14     	; 0x19e <Increment_decrement_Duty_Cycle+0x8e>
				case 3:
				RESET_LED3;
 190:	88 b3       	in	r24, 0x18	; 24
 192:	82 60       	ori	r24, 0x02	; 2
 194:	88 bb       	out	0x18, r24	; 24
				break;
 196:	03 c0       	rjmp	.+6      	; 0x19e <Increment_decrement_Duty_Cycle+0x8e>
				case 4:
				RESET_LED4;
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	88 bb       	out	0x18, r24	; 24
				break;
			}
			LED--;
 19e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a8:	08 95       	ret

000001aa <Soft_Start_and_Run_to_Max>:
		}
	return return_status;
}


void Soft_Start_and_Run_to_Max(void){
 1aa:	cf 93       	push	r28
	uint8_t duty_cycle = 10;
	SET_LED0;// turn ON LED0
 1ac:	82 b3       	in	r24, 0x12	; 18
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	82 bb       	out	0x12, r24	; 18
	for(uint8_t step=0; step<CYCLENUM; step++){
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <Soft_Start_and_Run_to_Max+0x18>
			if((uint8_t)0 == Delay_ms(200)){
 1b6:	88 ec       	ldi	r24, 0xC8	; 200
 1b8:	92 df       	rcall	.-220    	; 0xde <Delay_ms>
 1ba:	81 11       	cpse	r24, r1
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <Soft_Start_and_Run_to_Max+0x16>
				duty_cycle+=10;
				Increment_decrement_Duty_Cycle(INCREMENT);
 1be:	a8 df       	rcall	.-176    	; 0x110 <Increment_decrement_Duty_Cycle>


void Soft_Start_and_Run_to_Max(void){
	uint8_t duty_cycle = 10;
	SET_LED0;// turn ON LED0
	for(uint8_t step=0; step<CYCLENUM; step++){
 1c0:	cf 5f       	subi	r28, 0xFF	; 255
 1c2:	c5 30       	cpi	r28, 0x05	; 5
 1c4:	c0 f3       	brcs	.-16     	; 0x1b6 <Soft_Start_and_Run_to_Max+0xc>
			if((uint8_t)0 == Delay_ms(200)){
				duty_cycle+=10;
				Increment_decrement_Duty_Cycle(INCREMENT);
			}
	}
}
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <Output_Pins_Init>:


// init output PINs
void Output_Pins_Init(void){
// PWM output
	 DDRB |= (1 << DDB4); // as output for TMR1 PWM
 1ca:	87 b3       	in	r24, 0x17	; 23
 1cc:	80 61       	ori	r24, 0x10	; 16
 1ce:	87 bb       	out	0x17, r24	; 23
	   // set to zero
// set LEDs indicating power
	DDRD |= (1 << DDD5); // LED0
 1d0:	81 b3       	in	r24, 0x11	; 17
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	81 bb       	out	0x11, r24	; 17
	  RESET_LED4;// set to zero
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB3); // LED1
 1dc:	87 b3       	in	r24, 0x17	; 23
 1de:	88 60       	ori	r24, 0x08	; 8
 1e0:	87 bb       	out	0x17, r24	; 23
	  RESET_LED3;// set to zero
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	82 60       	ori	r24, 0x02	; 2
 1e6:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB2); // LED2
 1e8:	87 b3       	in	r24, 0x17	; 23
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	87 bb       	out	0x17, r24	; 23
	  RESET_LED2;// set to zero
 1ee:	88 b3       	in	r24, 0x18	; 24
 1f0:	84 60       	ori	r24, 0x04	; 4
 1f2:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB1); // LED3
 1f4:	87 b3       	in	r24, 0x17	; 23
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	87 bb       	out	0x17, r24	; 23
	  RESET_LED1;// set to zero
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	88 60       	ori	r24, 0x08	; 8
 1fe:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB0); // LED4
 200:	87 b3       	in	r24, 0x17	; 23
 202:	81 60       	ori	r24, 0x01	; 1
 204:	87 bb       	out	0x17, r24	; 23
	  RESET_LED0;// set to zero
 206:	82 b3       	in	r24, 0x12	; 18
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	82 bb       	out	0x12, r24	; 18
	 //another set of LEDs indicating filters statuses
	 DDRD |= (1 << DDD6); // LED5
 20c:	81 b3       	in	r24, 0x11	; 17
 20e:	80 64       	ori	r24, 0x40	; 64
 210:	81 bb       	out	0x11, r24	; 17
	  RESET_LED5;// set to zero
 212:	82 b3       	in	r24, 0x12	; 18
 214:	80 64       	ori	r24, 0x40	; 64
 216:	82 bb       	out	0x12, r24	; 18
	 DDRD |= (1 << DDD4); // LED6
 218:	81 b3       	in	r24, 0x11	; 17
 21a:	80 61       	ori	r24, 0x10	; 16
 21c:	81 bb       	out	0x11, r24	; 17
	  RESET_LED6;// set to zero
 21e:	82 b3       	in	r24, 0x12	; 18
 220:	80 61       	ori	r24, 0x10	; 16
 222:	82 bb       	out	0x12, r24	; 18
 224:	08 95       	ret

00000226 <Input_Pins_Init>:
}

// init input PINs
void Input_Pins_Init(void){
	DDRD &= ~(1 << DDD2); // PD2 as input for ext interrupt
 226:	81 b3       	in	r24, 0x11	; 17
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD2; // pull up
 22c:	82 b3       	in	r24, 0x12	; 18
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	82 bb       	out	0x12, r24	; 18
	DDRD &= ~(1 << DDD3); // PD3 as input for ext interrupt
 232:	81 b3       	in	r24, 0x11	; 17
 234:	87 7f       	andi	r24, 0xF7	; 247
 236:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD3; // pull up
 238:	82 b3       	in	r24, 0x12	; 18
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	82 bb       	out	0x12, r24	; 18
	
	// Configure INT0 to trigger on falling edge
	MCUCR |= (1 << ISC01);
 23e:	85 b7       	in	r24, 0x35	; 53
 240:	82 60       	ori	r24, 0x02	; 2
 242:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
 244:	85 b7       	in	r24, 0x35	; 53
 246:	8e 7f       	andi	r24, 0xFE	; 254
 248:	85 bf       	out	0x35, r24	; 53
	
	// Configure INT1 to trigger on falling edge
	MCUCR |= (1 << ISC11);
 24a:	85 b7       	in	r24, 0x35	; 53
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
 250:	85 b7       	in	r24, 0x35	; 53
 252:	8b 7f       	andi	r24, 0xFB	; 251
 254:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT0) | (1<<INT1);// enable interrupts
 256:	8b b7       	in	r24, 0x3b	; 59
 258:	80 6c       	ori	r24, 0xC0	; 192
 25a:	8b bf       	out	0x3b, r24	; 59
	sei();//enable global interrupts
 25c:	78 94       	sei
 25e:	08 95       	ret

00000260 <Timer0_Init>:
}

// init timers
void Timer0_Init(void){
	TCNT0 = 0;
 260:	12 be       	out	0x32, r1	; 50
	TCCR0B |= 1<<CS02 |1<<CS00; // clkI/O/1024 (From prescaler)
 262:	83 b7       	in	r24, 0x33	; 51
 264:	85 60       	ori	r24, 0x05	; 5
 266:	83 bf       	out	0x33, r24	; 51
 268:	08 95       	ret

0000026a <__fixunssfsi>:
 26a:	70 d0       	rcall	.+224    	; 0x34c <__fp_splitA>
 26c:	88 f0       	brcs	.+34     	; 0x290 <__fixunssfsi+0x26>
 26e:	9f 57       	subi	r25, 0x7F	; 127
 270:	90 f0       	brcs	.+36     	; 0x296 <__fixunssfsi+0x2c>
 272:	b9 2f       	mov	r27, r25
 274:	99 27       	eor	r25, r25
 276:	b7 51       	subi	r27, 0x17	; 23
 278:	a0 f0       	brcs	.+40     	; 0x2a2 <__fixunssfsi+0x38>
 27a:	d1 f0       	breq	.+52     	; 0x2b0 <__fixunssfsi+0x46>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	88 1f       	adc	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	1a f0       	brmi	.+6      	; 0x28c <__fixunssfsi+0x22>
 286:	ba 95       	dec	r27
 288:	c9 f7       	brne	.-14     	; 0x27c <__fixunssfsi+0x12>
 28a:	12 c0       	rjmp	.+36     	; 0x2b0 <__fixunssfsi+0x46>
 28c:	b1 30       	cpi	r27, 0x01	; 1
 28e:	81 f0       	breq	.+32     	; 0x2b0 <__fixunssfsi+0x46>
 290:	77 d0       	rcall	.+238    	; 0x380 <__fp_zero>
 292:	b1 e0       	ldi	r27, 0x01	; 1
 294:	08 95       	ret
 296:	74 c0       	rjmp	.+232    	; 0x380 <__fp_zero>
 298:	67 2f       	mov	r22, r23
 29a:	78 2f       	mov	r23, r24
 29c:	88 27       	eor	r24, r24
 29e:	b8 5f       	subi	r27, 0xF8	; 248
 2a0:	39 f0       	breq	.+14     	; 0x2b0 <__fixunssfsi+0x46>
 2a2:	b9 3f       	cpi	r27, 0xF9	; 249
 2a4:	cc f3       	brlt	.-14     	; 0x298 <__fixunssfsi+0x2e>
 2a6:	86 95       	lsr	r24
 2a8:	77 95       	ror	r23
 2aa:	67 95       	ror	r22
 2ac:	b3 95       	inc	r27
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__fixunssfsi+0x3c>
 2b0:	3e f4       	brtc	.+14     	; 0x2c0 <__fixunssfsi+0x56>
 2b2:	90 95       	com	r25
 2b4:	80 95       	com	r24
 2b6:	70 95       	com	r23
 2b8:	61 95       	neg	r22
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	8f 4f       	sbci	r24, 0xFF	; 255
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	08 95       	ret

000002c2 <__floatunsisf>:
 2c2:	e8 94       	clt
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <__floatsisf+0x12>

000002c6 <__floatsisf>:
 2c6:	97 fb       	bst	r25, 7
 2c8:	3e f4       	brtc	.+14     	; 0x2d8 <__floatsisf+0x12>
 2ca:	90 95       	com	r25
 2cc:	80 95       	com	r24
 2ce:	70 95       	com	r23
 2d0:	61 95       	neg	r22
 2d2:	7f 4f       	sbci	r23, 0xFF	; 255
 2d4:	8f 4f       	sbci	r24, 0xFF	; 255
 2d6:	9f 4f       	sbci	r25, 0xFF	; 255
 2d8:	99 23       	and	r25, r25
 2da:	a9 f0       	breq	.+42     	; 0x306 <__floatsisf+0x40>
 2dc:	f9 2f       	mov	r31, r25
 2de:	96 e9       	ldi	r25, 0x96	; 150
 2e0:	bb 27       	eor	r27, r27
 2e2:	93 95       	inc	r25
 2e4:	f6 95       	lsr	r31
 2e6:	87 95       	ror	r24
 2e8:	77 95       	ror	r23
 2ea:	67 95       	ror	r22
 2ec:	b7 95       	ror	r27
 2ee:	f1 11       	cpse	r31, r1
 2f0:	f8 cf       	rjmp	.-16     	; 0x2e2 <__floatsisf+0x1c>
 2f2:	fa f4       	brpl	.+62     	; 0x332 <__floatsisf+0x6c>
 2f4:	bb 0f       	add	r27, r27
 2f6:	11 f4       	brne	.+4      	; 0x2fc <__floatsisf+0x36>
 2f8:	60 ff       	sbrs	r22, 0
 2fa:	1b c0       	rjmp	.+54     	; 0x332 <__floatsisf+0x6c>
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	8f 4f       	sbci	r24, 0xFF	; 255
 302:	9f 4f       	sbci	r25, 0xFF	; 255
 304:	16 c0       	rjmp	.+44     	; 0x332 <__floatsisf+0x6c>
 306:	88 23       	and	r24, r24
 308:	11 f0       	breq	.+4      	; 0x30e <__floatsisf+0x48>
 30a:	96 e9       	ldi	r25, 0x96	; 150
 30c:	11 c0       	rjmp	.+34     	; 0x330 <__floatsisf+0x6a>
 30e:	77 23       	and	r23, r23
 310:	21 f0       	breq	.+8      	; 0x31a <__floatsisf+0x54>
 312:	9e e8       	ldi	r25, 0x8E	; 142
 314:	87 2f       	mov	r24, r23
 316:	76 2f       	mov	r23, r22
 318:	05 c0       	rjmp	.+10     	; 0x324 <__floatsisf+0x5e>
 31a:	66 23       	and	r22, r22
 31c:	71 f0       	breq	.+28     	; 0x33a <__floatsisf+0x74>
 31e:	96 e8       	ldi	r25, 0x86	; 134
 320:	86 2f       	mov	r24, r22
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	2a f0       	brmi	.+10     	; 0x332 <__floatsisf+0x6c>
 328:	9a 95       	dec	r25
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	88 1f       	adc	r24, r24
 330:	da f7       	brpl	.-10     	; 0x328 <__floatsisf+0x62>
 332:	88 0f       	add	r24, r24
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	97 f9       	bld	r25, 7
 33a:	08 95       	ret

0000033c <__fp_split3>:
 33c:	57 fd       	sbrc	r21, 7
 33e:	90 58       	subi	r25, 0x80	; 128
 340:	44 0f       	add	r20, r20
 342:	55 1f       	adc	r21, r21
 344:	59 f0       	breq	.+22     	; 0x35c <__fp_splitA+0x10>
 346:	5f 3f       	cpi	r21, 0xFF	; 255
 348:	71 f0       	breq	.+28     	; 0x366 <__fp_splitA+0x1a>
 34a:	47 95       	ror	r20

0000034c <__fp_splitA>:
 34c:	88 0f       	add	r24, r24
 34e:	97 fb       	bst	r25, 7
 350:	99 1f       	adc	r25, r25
 352:	61 f0       	breq	.+24     	; 0x36c <__fp_splitA+0x20>
 354:	9f 3f       	cpi	r25, 0xFF	; 255
 356:	79 f0       	breq	.+30     	; 0x376 <__fp_splitA+0x2a>
 358:	87 95       	ror	r24
 35a:	08 95       	ret
 35c:	12 16       	cp	r1, r18
 35e:	13 06       	cpc	r1, r19
 360:	14 06       	cpc	r1, r20
 362:	55 1f       	adc	r21, r21
 364:	f2 cf       	rjmp	.-28     	; 0x34a <__fp_split3+0xe>
 366:	46 95       	lsr	r20
 368:	f1 df       	rcall	.-30     	; 0x34c <__fp_splitA>
 36a:	08 c0       	rjmp	.+16     	; 0x37c <__fp_splitA+0x30>
 36c:	16 16       	cp	r1, r22
 36e:	17 06       	cpc	r1, r23
 370:	18 06       	cpc	r1, r24
 372:	99 1f       	adc	r25, r25
 374:	f1 cf       	rjmp	.-30     	; 0x358 <__fp_splitA+0xc>
 376:	86 95       	lsr	r24
 378:	71 05       	cpc	r23, r1
 37a:	61 05       	cpc	r22, r1
 37c:	08 94       	sec
 37e:	08 95       	ret

00000380 <__fp_zero>:
 380:	e8 94       	clt

00000382 <__fp_szero>:
 382:	bb 27       	eor	r27, r27
 384:	66 27       	eor	r22, r22
 386:	77 27       	eor	r23, r23
 388:	cb 01       	movw	r24, r22
 38a:	97 f9       	bld	r25, 7
 38c:	08 95       	ret

0000038e <__mulsf3>:
 38e:	0a d0       	rcall	.+20     	; 0x3a4 <__mulsf3x>
 390:	80 c0       	rjmp	.+256    	; 0x492 <__fp_round>
 392:	71 d0       	rcall	.+226    	; 0x476 <__fp_pscA>
 394:	28 f0       	brcs	.+10     	; 0x3a0 <__mulsf3+0x12>
 396:	76 d0       	rcall	.+236    	; 0x484 <__fp_pscB>
 398:	18 f0       	brcs	.+6      	; 0x3a0 <__mulsf3+0x12>
 39a:	95 23       	and	r25, r21
 39c:	09 f0       	breq	.+2      	; 0x3a0 <__mulsf3+0x12>
 39e:	62 c0       	rjmp	.+196    	; 0x464 <__fp_inf>
 3a0:	67 c0       	rjmp	.+206    	; 0x470 <__fp_nan>
 3a2:	ef cf       	rjmp	.-34     	; 0x382 <__fp_szero>

000003a4 <__mulsf3x>:
 3a4:	cb df       	rcall	.-106    	; 0x33c <__fp_split3>
 3a6:	a8 f3       	brcs	.-22     	; 0x392 <__mulsf3+0x4>

000003a8 <__mulsf3_pse>:
 3a8:	99 23       	and	r25, r25
 3aa:	d9 f3       	breq	.-10     	; 0x3a2 <__mulsf3+0x14>
 3ac:	55 23       	and	r21, r21
 3ae:	c9 f3       	breq	.-14     	; 0x3a2 <__mulsf3+0x14>
 3b0:	95 0f       	add	r25, r21
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	55 1f       	adc	r21, r21
 3b6:	aa 27       	eor	r26, r26
 3b8:	ee 27       	eor	r30, r30
 3ba:	ff 27       	eor	r31, r31
 3bc:	bb 27       	eor	r27, r27
 3be:	00 24       	eor	r0, r0
 3c0:	08 94       	sec
 3c2:	67 95       	ror	r22
 3c4:	20 f4       	brcc	.+8      	; 0x3ce <__mulsf3_pse+0x26>
 3c6:	e2 0f       	add	r30, r18
 3c8:	f3 1f       	adc	r31, r19
 3ca:	b4 1f       	adc	r27, r20
 3cc:	0a 1e       	adc	r0, r26
 3ce:	22 0f       	add	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	44 1f       	adc	r20, r20
 3d4:	aa 1f       	adc	r26, r26
 3d6:	66 95       	lsr	r22
 3d8:	a9 f7       	brne	.-22     	; 0x3c4 <__mulsf3_pse+0x1c>
 3da:	77 95       	ror	r23
 3dc:	30 f4       	brcc	.+12     	; 0x3ea <__mulsf3_pse+0x42>
 3de:	f3 0f       	add	r31, r19
 3e0:	b4 1f       	adc	r27, r20
 3e2:	0a 1e       	adc	r0, r26
 3e4:	12 1e       	adc	r1, r18
 3e6:	08 f4       	brcc	.+2      	; 0x3ea <__mulsf3_pse+0x42>
 3e8:	63 95       	inc	r22
 3ea:	33 0f       	add	r19, r19
 3ec:	44 1f       	adc	r20, r20
 3ee:	aa 1f       	adc	r26, r26
 3f0:	22 1f       	adc	r18, r18
 3f2:	76 95       	lsr	r23
 3f4:	99 f7       	brne	.-26     	; 0x3dc <__mulsf3_pse+0x34>
 3f6:	87 95       	ror	r24
 3f8:	20 f4       	brcc	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fa:	b4 0f       	add	r27, r20
 3fc:	0a 1e       	adc	r0, r26
 3fe:	12 1e       	adc	r1, r18
 400:	63 1f       	adc	r22, r19
 402:	44 0f       	add	r20, r20
 404:	aa 1f       	adc	r26, r26
 406:	22 1f       	adc	r18, r18
 408:	33 1f       	adc	r19, r19
 40a:	86 95       	lsr	r24
 40c:	a9 f7       	brne	.-22     	; 0x3f8 <__mulsf3_pse+0x50>
 40e:	86 2f       	mov	r24, r22
 410:	71 2d       	mov	r23, r1
 412:	60 2d       	mov	r22, r0
 414:	11 24       	eor	r1, r1
 416:	9f 57       	subi	r25, 0x7F	; 127
 418:	50 40       	sbci	r21, 0x00	; 0
 41a:	8a f0       	brmi	.+34     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 41c:	e1 f0       	breq	.+56     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 41e:	88 23       	and	r24, r24
 420:	4a f0       	brmi	.+18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	bb 1f       	adc	r27, r27
 428:	66 1f       	adc	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	88 1f       	adc	r24, r24
 42e:	91 50       	subi	r25, 0x01	; 1
 430:	50 40       	sbci	r21, 0x00	; 0
 432:	a9 f7       	brne	.-22     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 434:	9e 3f       	cpi	r25, 0xFE	; 254
 436:	51 05       	cpc	r21, r1
 438:	70 f0       	brcs	.+28     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 43a:	14 c0       	rjmp	.+40     	; 0x464 <__fp_inf>
 43c:	a2 cf       	rjmp	.-188    	; 0x382 <__fp_szero>
 43e:	5f 3f       	cpi	r21, 0xFF	; 255
 440:	ec f3       	brlt	.-6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 442:	98 3e       	cpi	r25, 0xE8	; 232
 444:	dc f3       	brlt	.-10     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 446:	86 95       	lsr	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b7 95       	ror	r27
 44e:	f7 95       	ror	r31
 450:	e7 95       	ror	r30
 452:	9f 5f       	subi	r25, 0xFF	; 255
 454:	c1 f7       	brne	.-16     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 456:	fe 2b       	or	r31, r30
 458:	88 0f       	add	r24, r24
 45a:	91 1d       	adc	r25, r1
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <__fp_inf>:
 464:	97 f9       	bld	r25, 7
 466:	9f 67       	ori	r25, 0x7F	; 127
 468:	80 e8       	ldi	r24, 0x80	; 128
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	08 95       	ret

00000470 <__fp_nan>:
 470:	9f ef       	ldi	r25, 0xFF	; 255
 472:	80 ec       	ldi	r24, 0xC0	; 192
 474:	08 95       	ret

00000476 <__fp_pscA>:
 476:	00 24       	eor	r0, r0
 478:	0a 94       	dec	r0
 47a:	16 16       	cp	r1, r22
 47c:	17 06       	cpc	r1, r23
 47e:	18 06       	cpc	r1, r24
 480:	09 06       	cpc	r0, r25
 482:	08 95       	ret

00000484 <__fp_pscB>:
 484:	00 24       	eor	r0, r0
 486:	0a 94       	dec	r0
 488:	12 16       	cp	r1, r18
 48a:	13 06       	cpc	r1, r19
 48c:	14 06       	cpc	r1, r20
 48e:	05 06       	cpc	r0, r21
 490:	08 95       	ret

00000492 <__fp_round>:
 492:	09 2e       	mov	r0, r25
 494:	03 94       	inc	r0
 496:	00 0c       	add	r0, r0
 498:	11 f4       	brne	.+4      	; 0x49e <__fp_round+0xc>
 49a:	88 23       	and	r24, r24
 49c:	52 f0       	brmi	.+20     	; 0x4b2 <__fp_round+0x20>
 49e:	bb 0f       	add	r27, r27
 4a0:	40 f4       	brcc	.+16     	; 0x4b2 <__fp_round+0x20>
 4a2:	bf 2b       	or	r27, r31
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__fp_round+0x18>
 4a6:	60 ff       	sbrs	r22, 0
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__fp_round+0x20>
 4aa:	6f 5f       	subi	r22, 0xFF	; 255
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	8f 4f       	sbci	r24, 0xFF	; 255
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	08 95       	ret

000004b4 <_exit>:
 4b4:	f8 94       	cli

000004b6 <__stop_program>:
 4b6:	ff cf       	rjmp	.-2      	; 0x4b6 <__stop_program>

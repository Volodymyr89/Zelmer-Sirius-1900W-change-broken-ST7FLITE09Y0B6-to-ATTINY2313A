
Zelmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000716  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  0000078a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009cf  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068b  00000000  00000000  0000127b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079e  00000000  00000000  00001906  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000339  00000000  00000000  000026e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002a1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	2b c1       	rjmp	.+598    	; 0x260 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	c2 c0       	rjmp	.+388    	; 0x1ae <__vector_20>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 36       	cpi	r26, 0x6A	; 106
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	66 c3       	rjmp	.+1740   	; 0x712 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:

bool button2_latch=false, button3_latch=false, set_power_max_flag=false;

int main(void)
{	
	Output_Pins_Init();
  48:	cc d1       	rcall	.+920    	; 0x3e2 <Output_Pins_Init>
	SET_LED5;// set LED
  4a:	82 b3       	in	r24, 0x12	; 18
  4c:	8f 7b       	andi	r24, 0xBF	; 191
  4e:	82 bb       	out	0x12, r24	; 18
	SET_LED6;// set LED
  50:	82 b3       	in	r24, 0x12	; 18
  52:	8f 7e       	andi	r24, 0xEF	; 239
  54:	82 bb       	out	0x12, r24	; 18
	Input_Pins_Init();
  56:	fc d1       	rcall	.+1016   	; 0x450 <Input_Pins_Init>
	Timer0_Init();
  58:	23 d2       	rcall	.+1094   	; 0x4a0 <Timer0_Init>
	Timer1_Init();
  5a:	27 d2       	rcall	.+1102   	; 0x4aa <Timer1_Init>
	sei();//enable global interrupts
  5c:	78 94       	sei
	Soft_Start_and_Run_to_Max();
  5e:	90 d1       	rcall	.+800    	; 0x380 <Soft_Start_and_Run_to_Max>
	RESET_LED5;// reset LED
  60:	82 b3       	in	r24, 0x12	; 18
  62:	80 64       	ori	r24, 0x40	; 64
  64:	82 bb       	out	0x12, r24	; 18
	RESET_LED6;// reset LED
  66:	82 b3       	in	r24, 0x12	; 18
  68:	80 61       	ori	r24, 0x10	; 16
  6a:	82 bb       	out	0x12, r24	; 18

    while (1) 
    {
		if(set_power_max_flag && OCR1A<=DELAYMIN){
  6c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  70:	88 23       	and	r24, r24
  72:	41 f0       	breq	.+16     	; 0x84 <__DATA_REGION_LENGTH__+0x4>
  74:	8a b5       	in	r24, 0x2a	; 42
  76:	9b b5       	in	r25, 0x2b	; 43
  78:	85 3f       	cpi	r24, 0xF5	; 245
  7a:	91 40       	sbci	r25, 0x01	; 1
  7c:	18 f4       	brcc	.+6      	; 0x84 <__DATA_REGION_LENGTH__+0x4>
			set_power_max=true;
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <set_power_max>
		}
		if((!(PIND&(1<<PIND2))) && (!button2_latch)){
  84:	82 99       	sbic	0x10, 2	; 16
  86:	29 c0       	rjmp	.+82     	; 0xda <__DATA_REGION_LENGTH__+0x5a>
  88:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <button2_latch>
  8c:	81 11       	cpse	r24, r1
  8e:	25 c0       	rjmp	.+74     	; 0xda <__DATA_REGION_LENGTH__+0x5a>
			button2_latch=true;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <button2_latch>
			while((uint8_t)1==Delay_ms(200,(PIND&(1<<PIND2)))){}
  96:	60 b3       	in	r22, 0x10	; 16
  98:	64 70       	andi	r22, 0x04	; 4
  9a:	88 ec       	ldi	r24, 0xC8	; 200
  9c:	0d d1       	rcall	.+538    	; 0x2b8 <Delay_ms>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	d1 f3       	breq	.-12     	; 0x96 <__DATA_REGION_LENGTH__+0x16>
				if(TRIACdelay<=DELAYMIN){
  a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TRIACdelay>
  a6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TRIACdelay+0x1>
  aa:	85 3f       	cpi	r24, 0xF5	; 245
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	92 07       	cpc	r25, r18
  b0:	20 f4       	brcc	.+8      	; 0xba <__DATA_REGION_LENGTH__+0x3a>
					set_power_max_flag=true;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  b8:	0d c0       	rjmp	.+26     	; 0xd4 <__DATA_REGION_LENGTH__+0x54>
				}
				else if (TRIACdelay>DELAYMIN){
  ba:	85 3f       	cpi	r24, 0xF5	; 245
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	92 07       	cpc	r25, r18
  c0:	48 f0       	brcs	.+18     	; 0xd4 <__DATA_REGION_LENGTH__+0x54>
					TRIACdelay-=(uint16_t)(DELAYCNTRL);
  c2:	80 5d       	subi	r24, 0xD0	; 208
  c4:	97 40       	sbci	r25, 0x07	; 7
  c6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <TRIACdelay+0x1>
  ca:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <TRIACdelay>
					increment_flag=true;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <increment_flag>
				}
				Increment_decrement_LED(INCREMENT);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	09 d1       	rcall	.+530    	; 0x2ea <Increment_decrement_LED>
  d8:	2b c0       	rjmp	.+86     	; 0x130 <__stack+0x51>
			}
		else if((!(PIND&(1<<PIND3))) && (!button3_latch)){
  da:	83 99       	sbic	0x10, 3	; 16
  dc:	29 c0       	rjmp	.+82     	; 0x130 <__stack+0x51>
  de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <button3_latch>
  e2:	81 11       	cpse	r24, r1
  e4:	25 c0       	rjmp	.+74     	; 0x130 <__stack+0x51>
			button3_latch=true;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <button3_latch>
			while((uint8_t)1==Delay_ms(200,(PIND&(1<<PIND3)))){}
  ec:	60 b3       	in	r22, 0x10	; 16
  ee:	68 70       	andi	r22, 0x08	; 8
  f0:	88 ec       	ldi	r24, 0xC8	; 200
  f2:	e2 d0       	rcall	.+452    	; 0x2b8 <Delay_ms>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	d1 f3       	breq	.-12     	; 0xec <__stack+0xd>
			if(set_power_max==true){
  f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <set_power_max>
  fc:	88 23       	and	r24, r24
  fe:	29 f0       	breq	.+10     	; 0x10a <__stack+0x2b>
				set_power_max=false;
 100:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <set_power_max>
				set_power_max_flag=false;
 104:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 108:	11 c0       	rjmp	.+34     	; 0x12c <__stack+0x4d>
			}
			else if (TRIACdelay<DELAYMAX){	
 10a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TRIACdelay>
 10e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TRIACdelay+0x1>
 112:	84 36       	cpi	r24, 0x64	; 100
 114:	29 e1       	ldi	r18, 0x19	; 25
 116:	92 07       	cpc	r25, r18
 118:	48 f4       	brcc	.+18     	; 0x12c <__stack+0x4d>
				TRIACdelay+=(uint16_t)(DELAYCNTRL);
 11a:	80 53       	subi	r24, 0x30	; 48
 11c:	98 4f       	sbci	r25, 0xF8	; 248
 11e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <TRIACdelay+0x1>
 122:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <TRIACdelay>
				decrement_flag=true;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <decrement_flag>
			}
			Increment_decrement_LED(DECREMENT);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	dd d0       	rcall	.+442    	; 0x2ea <Increment_decrement_LED>
		}
		if(PIND&(1<<PIND2)){
 130:	82 99       	sbic	0x10, 2	; 16
			button2_latch=false;
 132:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <button2_latch>
		}
		if(PIND&(1<<PIND3)){
 136:	83 99       	sbic	0x10, 3	; 16
			button3_latch=false;
 138:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <button3_latch>
		}
		if(!(PINA&(1<<PINA1))){
 13c:	c9 99       	sbic	0x19, 1	; 25
 13e:	04 c0       	rjmp	.+8      	; 0x148 <__stack+0x69>
				SET_LED5;// set LED
 140:	82 b3       	in	r24, 0x12	; 18
 142:	8f 7b       	andi	r24, 0xBF	; 191
 144:	82 bb       	out	0x12, r24	; 18
 146:	03 c0       	rjmp	.+6      	; 0x14e <__stack+0x6f>
		}
		else{
			RESET_LED5;// reset LED
 148:	82 b3       	in	r24, 0x12	; 18
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	82 bb       	out	0x12, r24	; 18
		}
		if(!(PIND&(1<<PIND1))){
 14e:	81 99       	sbic	0x10, 1	; 16
 150:	04 c0       	rjmp	.+8      	; 0x15a <__stack+0x7b>
			SET_LED6;// set LED
 152:	82 b3       	in	r24, 0x12	; 18
 154:	8f 7e       	andi	r24, 0xEF	; 239
 156:	82 bb       	out	0x12, r24	; 18
 158:	03 c0       	rjmp	.+6      	; 0x160 <__stack+0x81>
		}
		else{
			RESET_LED6;// reset LED
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	82 bb       	out	0x12, r24	; 18
		}
		if(!(PINA&(1<<PINA0))){
 160:	c8 99       	sbic	0x19, 0	; 25
 162:	04 c0       	rjmp	.+8      	; 0x16c <__stack+0x8d>
			SET_SOCKET;// reset socket
 164:	88 b3       	in	r24, 0x18	; 24
 166:	8f 77       	andi	r24, 0x7F	; 127
 168:	88 bb       	out	0x18, r24	; 24
 16a:	80 cf       	rjmp	.-256    	; 0x6c <main+0x24>
		}
		else{
			 RESET_SOCKET;// reset socket
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	88 bb       	out	0x18, r24	; 24
 172:	7c cf       	rjmp	.-264    	; 0x6c <main+0x24>

00000174 <Short_Pulse>:
volatile bool SoftStart=false, set_power_max=false;
uint8_t LED=0;



 void Short_Pulse(void){	
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	00 d0       	rcall	.+0      	; 0x17a <Short_Pulse+0x6>
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	dd 27       	eor	r29, r29
	volatile uint16_t delay=10;
 17e:	8a e0       	ldi	r24, 0x0A	; 10
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	9a 83       	std	Y+2, r25	; 0x02
 184:	89 83       	std	Y+1, r24	; 0x01
	RESET_TMR1OUT0;
 186:	88 b3       	in	r24, 0x18	; 24
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	88 bb       	out	0x18, r24	; 24
	while(delay--){}
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	9a 81       	ldd	r25, Y+2	; 0x02
 190:	9c 01       	movw	r18, r24
 192:	21 50       	subi	r18, 0x01	; 1
 194:	31 09       	sbc	r19, r1
 196:	3a 83       	std	Y+2, r19	; 0x02
 198:	29 83       	std	Y+1, r18	; 0x01
 19a:	89 2b       	or	r24, r25
 19c:	b9 f7       	brne	.-18     	; 0x18c <Short_Pulse+0x18>
	SET_TMR1OUT0;
 19e:	88 b3       	in	r24, 0x18	; 24
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	88 bb       	out	0x18, r24	; 24
}
 1a4:	ce 5f       	subi	r28, 0xFE	; 254
 1a6:	cd bf       	out	0x3d, r28	; 61
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <__vector_20>:

ISR(PCINT2_vect){
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	4f 93       	push	r20
 1be:	5f 93       	push	r21
 1c0:	6f 93       	push	r22
 1c2:	7f 93       	push	r23
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	if(SoftStart==true){
 1d0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <SoftStart>
 1d4:	88 23       	and	r24, r24
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <__vector_20+0x38>
		OCR1A = TRIACdelay;// set delay time;
 1d8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TRIACdelay>
 1dc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TRIACdelay+0x1>
 1e0:	9b bd       	out	0x2b, r25	; 43
 1e2:	8a bd       	out	0x2a, r24	; 42
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__vector_20+0x8e>
	}
	else if (increment_flag==true){
 1e6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <increment_flag>
 1ea:	88 23       	and	r24, r24
 1ec:	91 f0       	breq	.+36     	; 0x212 <__vector_20+0x64>
			if(OCR1A>TRIACdelay){
 1ee:	2a b5       	in	r18, 0x2a	; 42
 1f0:	3b b5       	in	r19, 0x2b	; 43
 1f2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TRIACdelay>
 1f6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TRIACdelay+0x1>
 1fa:	82 17       	cp	r24, r18
 1fc:	93 07       	cpc	r25, r19
 1fe:	30 f4       	brcc	.+12     	; 0x20c <__vector_20+0x5e>
				OCR1A -=DELAYCNTRLSOFTTRANSITION;
 200:	8a b5       	in	r24, 0x2a	; 42
 202:	9b b5       	in	r25, 0x2b	; 43
 204:	44 97       	sbiw	r24, 0x14	; 20
 206:	9b bd       	out	0x2b, r25	; 43
 208:	8a bd       	out	0x2a, r24	; 42
 20a:	18 c0       	rjmp	.+48     	; 0x23c <__vector_20+0x8e>
			}
			else{
				increment_flag=false;
 20c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <increment_flag>
 210:	15 c0       	rjmp	.+42     	; 0x23c <__vector_20+0x8e>
			}
	}
	else if (decrement_flag==true){
 212:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <decrement_flag>
 216:	88 23       	and	r24, r24
 218:	89 f0       	breq	.+34     	; 0x23c <__vector_20+0x8e>
			 if(OCR1A<TRIACdelay){
 21a:	2a b5       	in	r18, 0x2a	; 42
 21c:	3b b5       	in	r19, 0x2b	; 43
 21e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TRIACdelay>
 222:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TRIACdelay+0x1>
 226:	28 17       	cp	r18, r24
 228:	39 07       	cpc	r19, r25
 22a:	30 f4       	brcc	.+12     	; 0x238 <__vector_20+0x8a>
				OCR1A +=DELAYCNTRLSOFTTRANSITION;
 22c:	8a b5       	in	r24, 0x2a	; 42
 22e:	9b b5       	in	r25, 0x2b	; 43
 230:	44 96       	adiw	r24, 0x14	; 20
 232:	9b bd       	out	0x2b, r25	; 43
 234:	8a bd       	out	0x2a, r24	; 42
 236:	02 c0       	rjmp	.+4      	; 0x23c <__vector_20+0x8e>
			}
			else{
				decrement_flag=false;
 238:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <decrement_flag>
			}
	 }
	Timer1_Start();
 23c:	3d d1       	rcall	.+634    	; 0x4b8 <Timer1_Start>
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <__vector_4>:

ISR(TIMER1_COMPA_vect)
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	4f 93       	push	r20
 270:	5f 93       	push	r21
 272:	6f 93       	push	r22
 274:	7f 93       	push	r23
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	af 93       	push	r26
 27c:	bf 93       	push	r27
 27e:	ef 93       	push	r30
 280:	ff 93       	push	r31
	Timer1_Stop();
 282:	1e d1       	rcall	.+572    	; 0x4c0 <Timer1_Stop>
	if(set_power_max==true){
 284:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <set_power_max>
 288:	88 23       	and	r24, r24
 28a:	21 f0       	breq	.+8      	; 0x294 <__vector_4+0x34>
		RESET_TMR1OUT0; // set max power
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	8f 7e       	andi	r24, 0xEF	; 239
 290:	88 bb       	out	0x18, r24	; 24
 292:	01 c0       	rjmp	.+2      	; 0x296 <__vector_4+0x36>
	}
	else{
		Short_Pulse();
 294:	6f df       	rcall	.-290    	; 0x174 <Short_Pulse>
	}
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <Delay_ms>:

uint8_t Delay_ms(uint8_t delay, uint8_t reset){
	uint8_t return_status = 1;
	if(delay<=250){
 2b8:	8b 3f       	cpi	r24, 0xFB	; 251
 2ba:	a8 f4       	brcc	.+42     	; 0x2e6 <Delay_ms+0x2e>
		uint8_t counterdata= (uint8_t)(delay*0.976);
 2bc:	68 2f       	mov	r22, r24
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	2f d1       	rcall	.+606    	; 0x524 <__floatsisf>
 2c6:	23 e2       	ldi	r18, 0x23	; 35
 2c8:	3b ed       	ldi	r19, 0xDB	; 219
 2ca:	49 e7       	ldi	r20, 0x79	; 121
 2cc:	5f e3       	ldi	r21, 0x3F	; 63
 2ce:	8e d1       	rcall	.+796    	; 0x5ec <__mulsf3>
 2d0:	fb d0       	rcall	.+502    	; 0x4c8 <__fixunssfsi>
		TCNT0 = (255-counterdata);
 2d2:	60 95       	com	r22
 2d4:	62 bf       	out	0x32, r22	; 50
		while(!(TIFR&(1<<TOV0))){
 2d6:	08 b6       	in	r0, 0x38	; 56
 2d8:	01 fe       	sbrs	r0, 1
 2da:	fd cf       	rjmp	.-6      	; 0x2d6 <Delay_ms+0x1e>
				if(reset==(uint8_t)1)
					return_status= 1;
				}// wait until counter reaches 255
		TIFR |= 1<<TOV0;
 2dc:	88 b7       	in	r24, 0x38	; 56
 2de:	82 60       	ori	r24, 0x02	; 2
 2e0:	88 bf       	out	0x38, r24	; 56
		return_status= 0;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
		Short_Pulse();
	}
}

uint8_t Delay_ms(uint8_t delay, uint8_t reset){
	uint8_t return_status = 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
				}// wait until counter reaches 255
		TIFR |= 1<<TOV0;
		return_status= 0;
	}
	return return_status;
}
 2e8:	08 95       	ret

000002ea <Increment_decrement_LED>:
	set_power_max=true;
	SoftStart=false;
}

void Increment_decrement_LED(led_status_t led_status){
	if(led_status == INCREMENT){
 2ea:	81 11       	cpse	r24, r1
 2ec:	23 c0       	rjmp	.+70     	; 0x334 <Increment_decrement_LED+0x4a>
		if(LED<4){
 2ee:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <LED>
 2f2:	84 30       	cpi	r24, 0x04	; 4
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <Increment_decrement_LED+0xe>
 2f6:	43 c0       	rjmp	.+134    	; 0x37e <Increment_decrement_LED+0x94>
			LED++;
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LED>
			switch(LED){
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	69 f0       	breq	.+26     	; 0x31c <Increment_decrement_LED+0x32>
 302:	18 f4       	brcc	.+6      	; 0x30a <Increment_decrement_LED+0x20>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	31 f0       	breq	.+12     	; 0x314 <Increment_decrement_LED+0x2a>
 308:	08 95       	ret
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	59 f0       	breq	.+22     	; 0x324 <Increment_decrement_LED+0x3a>
 30e:	84 30       	cpi	r24, 0x04	; 4
 310:	69 f0       	breq	.+26     	; 0x32c <Increment_decrement_LED+0x42>
 312:	08 95       	ret
				case 1:
				SET_LED1;
 314:	88 b3       	in	r24, 0x18	; 24
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	88 bb       	out	0x18, r24	; 24
				break;
 31a:	08 95       	ret
				case 2:
				SET_LED2;
 31c:	88 b3       	in	r24, 0x18	; 24
 31e:	8b 7f       	andi	r24, 0xFB	; 251
 320:	88 bb       	out	0x18, r24	; 24
				break;
 322:	08 95       	ret
				case 3:
				SET_LED3;
 324:	88 b3       	in	r24, 0x18	; 24
 326:	8d 7f       	andi	r24, 0xFD	; 253
 328:	88 bb       	out	0x18, r24	; 24
				break;
 32a:	08 95       	ret
				case 4:
				SET_LED4;
 32c:	88 b3       	in	r24, 0x18	; 24
 32e:	8e 7f       	andi	r24, 0xFE	; 254
 330:	88 bb       	out	0x18, r24	; 24
				break;
 332:	08 95       	ret
			}
		}
	}
	else if (led_status == DECREMENT){
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	19 f5       	brne	.+70     	; 0x37e <Increment_decrement_LED+0x94>
		if(LED>=1){
 338:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <LED>
 33c:	88 23       	and	r24, r24
 33e:	f9 f0       	breq	.+62     	; 0x37e <Increment_decrement_LED+0x94>
			switch(LED){
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	69 f0       	breq	.+26     	; 0x35e <Increment_decrement_LED+0x74>
 344:	18 f4       	brcc	.+6      	; 0x34c <Increment_decrement_LED+0x62>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	31 f0       	breq	.+12     	; 0x356 <Increment_decrement_LED+0x6c>
 34a:	14 c0       	rjmp	.+40     	; 0x374 <Increment_decrement_LED+0x8a>
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	59 f0       	breq	.+22     	; 0x366 <Increment_decrement_LED+0x7c>
 350:	84 30       	cpi	r24, 0x04	; 4
 352:	69 f0       	breq	.+26     	; 0x36e <Increment_decrement_LED+0x84>
 354:	0f c0       	rjmp	.+30     	; 0x374 <Increment_decrement_LED+0x8a>
				case 1:
				RESET_LED1;
 356:	88 b3       	in	r24, 0x18	; 24
 358:	88 60       	ori	r24, 0x08	; 8
 35a:	88 bb       	out	0x18, r24	; 24
				break;
 35c:	0b c0       	rjmp	.+22     	; 0x374 <Increment_decrement_LED+0x8a>
				case 2:
				RESET_LED2;
 35e:	88 b3       	in	r24, 0x18	; 24
 360:	84 60       	ori	r24, 0x04	; 4
 362:	88 bb       	out	0x18, r24	; 24
				break;
 364:	07 c0       	rjmp	.+14     	; 0x374 <Increment_decrement_LED+0x8a>
				case 3:
				RESET_LED3;
 366:	88 b3       	in	r24, 0x18	; 24
 368:	82 60       	ori	r24, 0x02	; 2
 36a:	88 bb       	out	0x18, r24	; 24
				break;
 36c:	03 c0       	rjmp	.+6      	; 0x374 <Increment_decrement_LED+0x8a>
				case 4:
				RESET_LED4;
 36e:	88 b3       	in	r24, 0x18	; 24
 370:	81 60       	ori	r24, 0x01	; 1
 372:	88 bb       	out	0x18, r24	; 24
				break;
			}
			LED--;
 374:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <LED>
 378:	81 50       	subi	r24, 0x01	; 1
 37a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LED>
 37e:	08 95       	ret

00000380 <Soft_Start_and_Run_to_Max>:
	}
	return return_status;
}


void Soft_Start_and_Run_to_Max(void){
 380:	cf 93       	push	r28
	uint8_t cnt=0;
	SoftStart=true;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <SoftStart>
	SET_LED0;// turn ON LED0
 388:	82 b3       	in	r24, 0x12	; 18
 38a:	8f 7d       	andi	r24, 0xDF	; 223
 38c:	82 bb       	out	0x12, r24	; 18
	for(TRIACdelay=DELAYMAXSOFTSTART; TRIACdelay>DELAYMIN; TRIACdelay-=DELAYSOFTSTART){
 38e:	80 e4       	ldi	r24, 0x40	; 64
 390:	9f e1       	ldi	r25, 0x1F	; 31
 392:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <TRIACdelay+0x1>
 396:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <TRIACdelay>
	return return_status;
}


void Soft_Start_and_Run_to_Max(void){
	uint8_t cnt=0;
 39a:	c0 e0       	ldi	r28, 0x00	; 0
	SoftStart=true;
	SET_LED0;// turn ON LED0
	for(TRIACdelay=DELAYMAXSOFTSTART; TRIACdelay>DELAYMIN; TRIACdelay-=DELAYSOFTSTART){
 39c:	14 c0       	rjmp	.+40     	; 0x3c6 <Soft_Start_and_Run_to_Max+0x46>
			if((uint8_t)0 == Delay_ms(100, 0)){
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	84 e6       	ldi	r24, 0x64	; 100
 3a2:	8a df       	rcall	.-236    	; 0x2b8 <Delay_ms>
 3a4:	81 11       	cpse	r24, r1
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <Soft_Start_and_Run_to_Max+0x32>
				cnt++;
 3a8:	cf 5f       	subi	r28, 0xFF	; 255
				if(cnt>=5){
 3aa:	c5 30       	cpi	r28, 0x05	; 5
 3ac:	10 f0       	brcs	.+4      	; 0x3b2 <Soft_Start_and_Run_to_Max+0x32>
					Increment_decrement_LED(INCREMENT);
 3ae:	9d df       	rcall	.-198    	; 0x2ea <Increment_decrement_LED>
					cnt=0;
 3b0:	c0 e0       	ldi	r28, 0x00	; 0

void Soft_Start_and_Run_to_Max(void){
	uint8_t cnt=0;
	SoftStart=true;
	SET_LED0;// turn ON LED0
	for(TRIACdelay=DELAYMAXSOFTSTART; TRIACdelay>DELAYMIN; TRIACdelay-=DELAYSOFTSTART){
 3b2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TRIACdelay>
 3b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TRIACdelay+0x1>
 3ba:	87 57       	subi	r24, 0x77	; 119
 3bc:	91 40       	sbci	r25, 0x01	; 1
 3be:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <TRIACdelay+0x1>
 3c2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <TRIACdelay>
 3c6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <TRIACdelay>
 3ca:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <TRIACdelay+0x1>
 3ce:	85 3f       	cpi	r24, 0xF5	; 245
 3d0:	91 40       	sbci	r25, 0x01	; 1
 3d2:	28 f7       	brcc	.-54     	; 0x39e <Soft_Start_and_Run_to_Max+0x1e>
					Increment_decrement_LED(INCREMENT);
					cnt=0;
				}
			}
		}
	set_power_max=true;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <set_power_max>
	SoftStart=false;
 3da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <SoftStart>
}
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <Output_Pins_Init>:


// init output PINs
void Output_Pins_Init(void){
// PWM output
	 DDRB |= (1 << DDB4); // as output for TMR1 PWM
 3e2:	87 b3       	in	r24, 0x17	; 23
 3e4:	80 61       	ori	r24, 0x10	; 16
 3e6:	87 bb       	out	0x17, r24	; 23
	 SET_TMR1OUT0;// set to zero
 3e8:	88 b3       	in	r24, 0x18	; 24
 3ea:	80 61       	ori	r24, 0x10	; 16
 3ec:	88 bb       	out	0x18, r24	; 24
// set LEDs indicating power
	DDRD |= (1 << DDD5); // LED0
 3ee:	81 b3       	in	r24, 0x11	; 17
 3f0:	80 62       	ori	r24, 0x20	; 32
 3f2:	81 bb       	out	0x11, r24	; 17
	  RESET_LED4;// set to zero
 3f4:	88 b3       	in	r24, 0x18	; 24
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB3); // LED1
 3fa:	87 b3       	in	r24, 0x17	; 23
 3fc:	88 60       	ori	r24, 0x08	; 8
 3fe:	87 bb       	out	0x17, r24	; 23
	  RESET_LED3;// set to zero
 400:	88 b3       	in	r24, 0x18	; 24
 402:	82 60       	ori	r24, 0x02	; 2
 404:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB2); // LED2
 406:	87 b3       	in	r24, 0x17	; 23
 408:	84 60       	ori	r24, 0x04	; 4
 40a:	87 bb       	out	0x17, r24	; 23
	  RESET_LED2;// set to zero
 40c:	88 b3       	in	r24, 0x18	; 24
 40e:	84 60       	ori	r24, 0x04	; 4
 410:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB1); // LED3
 412:	87 b3       	in	r24, 0x17	; 23
 414:	82 60       	ori	r24, 0x02	; 2
 416:	87 bb       	out	0x17, r24	; 23
	  RESET_LED1;// set to zero
 418:	88 b3       	in	r24, 0x18	; 24
 41a:	88 60       	ori	r24, 0x08	; 8
 41c:	88 bb       	out	0x18, r24	; 24
	 DDRB |= (1 << DDB0); // LED4
 41e:	87 b3       	in	r24, 0x17	; 23
 420:	81 60       	ori	r24, 0x01	; 1
 422:	87 bb       	out	0x17, r24	; 23
	  RESET_LED0;// set to zero
 424:	82 b3       	in	r24, 0x12	; 18
 426:	80 62       	ori	r24, 0x20	; 32
 428:	82 bb       	out	0x12, r24	; 18
	 //another set of LEDs indicating filters statuses
	 DDRD |= (1 << DDD6); // LED5 brush filter
 42a:	81 b3       	in	r24, 0x11	; 17
 42c:	80 64       	ori	r24, 0x40	; 64
 42e:	81 bb       	out	0x11, r24	; 17
	  RESET_LED5;// set to zero
 430:	82 b3       	in	r24, 0x12	; 18
 432:	80 64       	ori	r24, 0x40	; 64
 434:	82 bb       	out	0x12, r24	; 18
	 DDRD |= (1 << DDD4); // LED6
 436:	81 b3       	in	r24, 0x11	; 17
 438:	80 61       	ori	r24, 0x10	; 16
 43a:	81 bb       	out	0x11, r24	; 17
	  RESET_LED6;// set to zero
 43c:	82 b3       	in	r24, 0x12	; 18
 43e:	80 61       	ori	r24, 0x10	; 16
 440:	82 bb       	out	0x12, r24	; 18
	  // brush socket control
	 DDRB |= (1 << DDB7); // socket
 442:	87 b3       	in	r24, 0x17	; 23
 444:	80 68       	ori	r24, 0x80	; 128
 446:	87 bb       	out	0x17, r24	; 23
	 RESET_SOCKET;// set to zero 
 448:	88 b3       	in	r24, 0x18	; 24
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	88 bb       	out	0x18, r24	; 24
 44e:	08 95       	ret

00000450 <Input_Pins_Init>:
}

// init input PINs
void Input_Pins_Init(void){
	//pins for min/max buttons
	DDRD &= ~(1 << DDD2); // PD2 as input 
 450:	81 b3       	in	r24, 0x11	; 17
 452:	8b 7f       	andi	r24, 0xFB	; 251
 454:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD2; // pull up
 456:	82 b3       	in	r24, 0x12	; 18
 458:	84 60       	ori	r24, 0x04	; 4
 45a:	82 bb       	out	0x12, r24	; 18
	DDRD &= ~(1 << DDD3); // PD3 as input 
 45c:	81 b3       	in	r24, 0x11	; 17
 45e:	87 7f       	andi	r24, 0xF7	; 247
 460:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD3; // pull up
 462:	82 b3       	in	r24, 0x12	; 18
 464:	88 60       	ori	r24, 0x08	; 8
 466:	82 bb       	out	0x12, r24	; 18
	//pins for filter sensors
	DDRD &= ~(1 << DDD1); // PD1 as input 
 468:	81 b3       	in	r24, 0x11	; 17
 46a:	8d 7f       	andi	r24, 0xFD	; 253
 46c:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PORTD1; // pull up
 46e:	82 b3       	in	r24, 0x12	; 18
 470:	82 60       	ori	r24, 0x02	; 2
 472:	82 bb       	out	0x12, r24	; 18
	DDRA &= ~(1 << DDA1); // PA1 as input for "Worek" brush filter
 474:	8a b3       	in	r24, 0x1a	; 26
 476:	8d 7f       	andi	r24, 0xFD	; 253
 478:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 1 << PORTA1; // pull up
 47a:	8b b3       	in	r24, 0x1b	; 27
 47c:	82 60       	ori	r24, 0x02	; 2
 47e:	8b bb       	out	0x1b, r24	; 27
	DDRA &= ~(1 << DDA0); // PA0 as input for "brush holder"
 480:	8a b3       	in	r24, 0x1a	; 26
 482:	8e 7f       	andi	r24, 0xFE	; 254
 484:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 1 << PORTA0; // pull up
 486:	8b b3       	in	r24, 0x1b	; 27
 488:	81 60       	ori	r24, 0x01	; 1
 48a:	8b bb       	out	0x1b, r24	; 27
	
	//pin for ZCD
	DDRD &= ~(1 << DDD0); // PD0 as input for zero cross detector
 48c:	81 b3       	in	r24, 0x11	; 17
 48e:	8e 7f       	andi	r24, 0xFE	; 254
 490:	81 bb       	out	0x11, r24	; 17
	// Configure ext interrupt
	PCMSK2 |= 1<<PCINT11;
 492:	85 b1       	in	r24, 0x05	; 5
 494:	81 60       	ori	r24, 0x01	; 1
 496:	85 b9       	out	0x05, r24	; 5
	GIMSK |= 1<<PCIE2;
 498:	8b b7       	in	r24, 0x3b	; 59
 49a:	80 61       	ori	r24, 0x10	; 16
 49c:	8b bf       	out	0x3b, r24	; 59
 49e:	08 95       	ret

000004a0 <Timer0_Init>:
	*/
}

// init timers
void Timer0_Init(void){
	TCNT0 = 0;
 4a0:	12 be       	out	0x32, r1	; 50
	TCCR0B |= 1<<CS02 |1<<CS00; // clkI/O/1024 (From prescaler)
 4a2:	83 b7       	in	r24, 0x33	; 51
 4a4:	85 60       	ori	r24, 0x05	; 5
 4a6:	83 bf       	out	0x33, r24	; 51
 4a8:	08 95       	ret

000004aa <Timer1_Init>:

}

void Timer1_Init(void){
	 TCCR1B |= (1<<WGM12);  //CTC OCR1A, 
 4aa:	8e b5       	in	r24, 0x2e	; 46
 4ac:	88 60       	ori	r24, 0x08	; 8
 4ae:	8e bd       	out	0x2e, r24	; 46
	 TIMSK |= (1 << OCIE1A);
 4b0:	89 b7       	in	r24, 0x39	; 57
 4b2:	80 64       	ori	r24, 0x40	; 64
 4b4:	89 bf       	out	0x39, r24	; 57
 4b6:	08 95       	ret

000004b8 <Timer1_Start>:
}

void Timer1_Start(void){
	 TCCR1B |= 1<<CS10;// clkI/O/1 (No prescaling)
 4b8:	8e b5       	in	r24, 0x2e	; 46
 4ba:	81 60       	ori	r24, 0x01	; 1
 4bc:	8e bd       	out	0x2e, r24	; 46
 4be:	08 95       	ret

000004c0 <Timer1_Stop>:
}

void Timer1_Stop(void){
	TCCR1B &= ~(1<<CS10);//clkI/O/1 (No prescaling)
 4c0:	8e b5       	in	r24, 0x2e	; 46
 4c2:	8e 7f       	andi	r24, 0xFE	; 254
 4c4:	8e bd       	out	0x2e, r24	; 46
 4c6:	08 95       	ret

000004c8 <__fixunssfsi>:
 4c8:	70 d0       	rcall	.+224    	; 0x5aa <__fp_splitA>
 4ca:	88 f0       	brcs	.+34     	; 0x4ee <__fixunssfsi+0x26>
 4cc:	9f 57       	subi	r25, 0x7F	; 127
 4ce:	90 f0       	brcs	.+36     	; 0x4f4 <__fixunssfsi+0x2c>
 4d0:	b9 2f       	mov	r27, r25
 4d2:	99 27       	eor	r25, r25
 4d4:	b7 51       	subi	r27, 0x17	; 23
 4d6:	a0 f0       	brcs	.+40     	; 0x500 <__fixunssfsi+0x38>
 4d8:	d1 f0       	breq	.+52     	; 0x50e <__fixunssfsi+0x46>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	88 1f       	adc	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	1a f0       	brmi	.+6      	; 0x4ea <__fixunssfsi+0x22>
 4e4:	ba 95       	dec	r27
 4e6:	c9 f7       	brne	.-14     	; 0x4da <__fixunssfsi+0x12>
 4e8:	12 c0       	rjmp	.+36     	; 0x50e <__fixunssfsi+0x46>
 4ea:	b1 30       	cpi	r27, 0x01	; 1
 4ec:	81 f0       	breq	.+32     	; 0x50e <__fixunssfsi+0x46>
 4ee:	77 d0       	rcall	.+238    	; 0x5de <__fp_zero>
 4f0:	b1 e0       	ldi	r27, 0x01	; 1
 4f2:	08 95       	ret
 4f4:	74 c0       	rjmp	.+232    	; 0x5de <__fp_zero>
 4f6:	67 2f       	mov	r22, r23
 4f8:	78 2f       	mov	r23, r24
 4fa:	88 27       	eor	r24, r24
 4fc:	b8 5f       	subi	r27, 0xF8	; 248
 4fe:	39 f0       	breq	.+14     	; 0x50e <__fixunssfsi+0x46>
 500:	b9 3f       	cpi	r27, 0xF9	; 249
 502:	cc f3       	brlt	.-14     	; 0x4f6 <__fixunssfsi+0x2e>
 504:	86 95       	lsr	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b3 95       	inc	r27
 50c:	d9 f7       	brne	.-10     	; 0x504 <__fixunssfsi+0x3c>
 50e:	3e f4       	brtc	.+14     	; 0x51e <__fixunssfsi+0x56>
 510:	90 95       	com	r25
 512:	80 95       	com	r24
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	8f 4f       	sbci	r24, 0xFF	; 255
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	08 95       	ret

00000520 <__floatunsisf>:
 520:	e8 94       	clt
 522:	09 c0       	rjmp	.+18     	; 0x536 <__floatsisf+0x12>

00000524 <__floatsisf>:
 524:	97 fb       	bst	r25, 7
 526:	3e f4       	brtc	.+14     	; 0x536 <__floatsisf+0x12>
 528:	90 95       	com	r25
 52a:	80 95       	com	r24
 52c:	70 95       	com	r23
 52e:	61 95       	neg	r22
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	99 23       	and	r25, r25
 538:	a9 f0       	breq	.+42     	; 0x564 <__floatsisf+0x40>
 53a:	f9 2f       	mov	r31, r25
 53c:	96 e9       	ldi	r25, 0x96	; 150
 53e:	bb 27       	eor	r27, r27
 540:	93 95       	inc	r25
 542:	f6 95       	lsr	r31
 544:	87 95       	ror	r24
 546:	77 95       	ror	r23
 548:	67 95       	ror	r22
 54a:	b7 95       	ror	r27
 54c:	f1 11       	cpse	r31, r1
 54e:	f8 cf       	rjmp	.-16     	; 0x540 <__floatsisf+0x1c>
 550:	fa f4       	brpl	.+62     	; 0x590 <__floatsisf+0x6c>
 552:	bb 0f       	add	r27, r27
 554:	11 f4       	brne	.+4      	; 0x55a <__floatsisf+0x36>
 556:	60 ff       	sbrs	r22, 0
 558:	1b c0       	rjmp	.+54     	; 0x590 <__floatsisf+0x6c>
 55a:	6f 5f       	subi	r22, 0xFF	; 255
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	16 c0       	rjmp	.+44     	; 0x590 <__floatsisf+0x6c>
 564:	88 23       	and	r24, r24
 566:	11 f0       	breq	.+4      	; 0x56c <__floatsisf+0x48>
 568:	96 e9       	ldi	r25, 0x96	; 150
 56a:	11 c0       	rjmp	.+34     	; 0x58e <__floatsisf+0x6a>
 56c:	77 23       	and	r23, r23
 56e:	21 f0       	breq	.+8      	; 0x578 <__floatsisf+0x54>
 570:	9e e8       	ldi	r25, 0x8E	; 142
 572:	87 2f       	mov	r24, r23
 574:	76 2f       	mov	r23, r22
 576:	05 c0       	rjmp	.+10     	; 0x582 <__floatsisf+0x5e>
 578:	66 23       	and	r22, r22
 57a:	71 f0       	breq	.+28     	; 0x598 <__floatsisf+0x74>
 57c:	96 e8       	ldi	r25, 0x86	; 134
 57e:	86 2f       	mov	r24, r22
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	2a f0       	brmi	.+10     	; 0x590 <__floatsisf+0x6c>
 586:	9a 95       	dec	r25
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	da f7       	brpl	.-10     	; 0x586 <__floatsisf+0x62>
 590:	88 0f       	add	r24, r24
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	97 f9       	bld	r25, 7
 598:	08 95       	ret

0000059a <__fp_split3>:
 59a:	57 fd       	sbrc	r21, 7
 59c:	90 58       	subi	r25, 0x80	; 128
 59e:	44 0f       	add	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	59 f0       	breq	.+22     	; 0x5ba <__fp_splitA+0x10>
 5a4:	5f 3f       	cpi	r21, 0xFF	; 255
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <__fp_splitA+0x1a>
 5a8:	47 95       	ror	r20

000005aa <__fp_splitA>:
 5aa:	88 0f       	add	r24, r24
 5ac:	97 fb       	bst	r25, 7
 5ae:	99 1f       	adc	r25, r25
 5b0:	61 f0       	breq	.+24     	; 0x5ca <__fp_splitA+0x20>
 5b2:	9f 3f       	cpi	r25, 0xFF	; 255
 5b4:	79 f0       	breq	.+30     	; 0x5d4 <__fp_splitA+0x2a>
 5b6:	87 95       	ror	r24
 5b8:	08 95       	ret
 5ba:	12 16       	cp	r1, r18
 5bc:	13 06       	cpc	r1, r19
 5be:	14 06       	cpc	r1, r20
 5c0:	55 1f       	adc	r21, r21
 5c2:	f2 cf       	rjmp	.-28     	; 0x5a8 <__fp_split3+0xe>
 5c4:	46 95       	lsr	r20
 5c6:	f1 df       	rcall	.-30     	; 0x5aa <__fp_splitA>
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <__fp_splitA+0x30>
 5ca:	16 16       	cp	r1, r22
 5cc:	17 06       	cpc	r1, r23
 5ce:	18 06       	cpc	r1, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	f1 cf       	rjmp	.-30     	; 0x5b6 <__fp_splitA+0xc>
 5d4:	86 95       	lsr	r24
 5d6:	71 05       	cpc	r23, r1
 5d8:	61 05       	cpc	r22, r1
 5da:	08 94       	sec
 5dc:	08 95       	ret

000005de <__fp_zero>:
 5de:	e8 94       	clt

000005e0 <__fp_szero>:
 5e0:	bb 27       	eor	r27, r27
 5e2:	66 27       	eor	r22, r22
 5e4:	77 27       	eor	r23, r23
 5e6:	cb 01       	movw	r24, r22
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <__mulsf3>:
 5ec:	0a d0       	rcall	.+20     	; 0x602 <__mulsf3x>
 5ee:	80 c0       	rjmp	.+256    	; 0x6f0 <__fp_round>
 5f0:	71 d0       	rcall	.+226    	; 0x6d4 <__fp_pscA>
 5f2:	28 f0       	brcs	.+10     	; 0x5fe <__mulsf3+0x12>
 5f4:	76 d0       	rcall	.+236    	; 0x6e2 <__fp_pscB>
 5f6:	18 f0       	brcs	.+6      	; 0x5fe <__mulsf3+0x12>
 5f8:	95 23       	and	r25, r21
 5fa:	09 f0       	breq	.+2      	; 0x5fe <__mulsf3+0x12>
 5fc:	62 c0       	rjmp	.+196    	; 0x6c2 <__fp_inf>
 5fe:	67 c0       	rjmp	.+206    	; 0x6ce <__fp_nan>
 600:	ef cf       	rjmp	.-34     	; 0x5e0 <__fp_szero>

00000602 <__mulsf3x>:
 602:	cb df       	rcall	.-106    	; 0x59a <__fp_split3>
 604:	a8 f3       	brcs	.-22     	; 0x5f0 <__mulsf3+0x4>

00000606 <__mulsf3_pse>:
 606:	99 23       	and	r25, r25
 608:	d9 f3       	breq	.-10     	; 0x600 <__mulsf3+0x14>
 60a:	55 23       	and	r21, r21
 60c:	c9 f3       	breq	.-14     	; 0x600 <__mulsf3+0x14>
 60e:	95 0f       	add	r25, r21
 610:	50 e0       	ldi	r21, 0x00	; 0
 612:	55 1f       	adc	r21, r21
 614:	aa 27       	eor	r26, r26
 616:	ee 27       	eor	r30, r30
 618:	ff 27       	eor	r31, r31
 61a:	bb 27       	eor	r27, r27
 61c:	00 24       	eor	r0, r0
 61e:	08 94       	sec
 620:	67 95       	ror	r22
 622:	20 f4       	brcc	.+8      	; 0x62c <__mulsf3_pse+0x26>
 624:	e2 0f       	add	r30, r18
 626:	f3 1f       	adc	r31, r19
 628:	b4 1f       	adc	r27, r20
 62a:	0a 1e       	adc	r0, r26
 62c:	22 0f       	add	r18, r18
 62e:	33 1f       	adc	r19, r19
 630:	44 1f       	adc	r20, r20
 632:	aa 1f       	adc	r26, r26
 634:	66 95       	lsr	r22
 636:	a9 f7       	brne	.-22     	; 0x622 <__mulsf3_pse+0x1c>
 638:	77 95       	ror	r23
 63a:	30 f4       	brcc	.+12     	; 0x648 <__mulsf3_pse+0x42>
 63c:	f3 0f       	add	r31, r19
 63e:	b4 1f       	adc	r27, r20
 640:	0a 1e       	adc	r0, r26
 642:	12 1e       	adc	r1, r18
 644:	08 f4       	brcc	.+2      	; 0x648 <__mulsf3_pse+0x42>
 646:	63 95       	inc	r22
 648:	33 0f       	add	r19, r19
 64a:	44 1f       	adc	r20, r20
 64c:	aa 1f       	adc	r26, r26
 64e:	22 1f       	adc	r18, r18
 650:	76 95       	lsr	r23
 652:	99 f7       	brne	.-26     	; 0x63a <__mulsf3_pse+0x34>
 654:	87 95       	ror	r24
 656:	20 f4       	brcc	.+8      	; 0x660 <__mulsf3_pse+0x5a>
 658:	b4 0f       	add	r27, r20
 65a:	0a 1e       	adc	r0, r26
 65c:	12 1e       	adc	r1, r18
 65e:	63 1f       	adc	r22, r19
 660:	44 0f       	add	r20, r20
 662:	aa 1f       	adc	r26, r26
 664:	22 1f       	adc	r18, r18
 666:	33 1f       	adc	r19, r19
 668:	86 95       	lsr	r24
 66a:	a9 f7       	brne	.-22     	; 0x656 <__mulsf3_pse+0x50>
 66c:	86 2f       	mov	r24, r22
 66e:	71 2d       	mov	r23, r1
 670:	60 2d       	mov	r22, r0
 672:	11 24       	eor	r1, r1
 674:	9f 57       	subi	r25, 0x7F	; 127
 676:	50 40       	sbci	r21, 0x00	; 0
 678:	8a f0       	brmi	.+34     	; 0x69c <__mulsf3_pse+0x96>
 67a:	e1 f0       	breq	.+56     	; 0x6b4 <__mulsf3_pse+0xae>
 67c:	88 23       	and	r24, r24
 67e:	4a f0       	brmi	.+18     	; 0x692 <__mulsf3_pse+0x8c>
 680:	ee 0f       	add	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	bb 1f       	adc	r27, r27
 686:	66 1f       	adc	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	88 1f       	adc	r24, r24
 68c:	91 50       	subi	r25, 0x01	; 1
 68e:	50 40       	sbci	r21, 0x00	; 0
 690:	a9 f7       	brne	.-22     	; 0x67c <__mulsf3_pse+0x76>
 692:	9e 3f       	cpi	r25, 0xFE	; 254
 694:	51 05       	cpc	r21, r1
 696:	70 f0       	brcs	.+28     	; 0x6b4 <__mulsf3_pse+0xae>
 698:	14 c0       	rjmp	.+40     	; 0x6c2 <__fp_inf>
 69a:	a2 cf       	rjmp	.-188    	; 0x5e0 <__fp_szero>
 69c:	5f 3f       	cpi	r21, 0xFF	; 255
 69e:	ec f3       	brlt	.-6      	; 0x69a <__mulsf3_pse+0x94>
 6a0:	98 3e       	cpi	r25, 0xE8	; 232
 6a2:	dc f3       	brlt	.-10     	; 0x69a <__mulsf3_pse+0x94>
 6a4:	86 95       	lsr	r24
 6a6:	77 95       	ror	r23
 6a8:	67 95       	ror	r22
 6aa:	b7 95       	ror	r27
 6ac:	f7 95       	ror	r31
 6ae:	e7 95       	ror	r30
 6b0:	9f 5f       	subi	r25, 0xFF	; 255
 6b2:	c1 f7       	brne	.-16     	; 0x6a4 <__mulsf3_pse+0x9e>
 6b4:	fe 2b       	or	r31, r30
 6b6:	88 0f       	add	r24, r24
 6b8:	91 1d       	adc	r25, r1
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	97 f9       	bld	r25, 7
 6c0:	08 95       	ret

000006c2 <__fp_inf>:
 6c2:	97 f9       	bld	r25, 7
 6c4:	9f 67       	ori	r25, 0x7F	; 127
 6c6:	80 e8       	ldi	r24, 0x80	; 128
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	08 95       	ret

000006ce <__fp_nan>:
 6ce:	9f ef       	ldi	r25, 0xFF	; 255
 6d0:	80 ec       	ldi	r24, 0xC0	; 192
 6d2:	08 95       	ret

000006d4 <__fp_pscA>:
 6d4:	00 24       	eor	r0, r0
 6d6:	0a 94       	dec	r0
 6d8:	16 16       	cp	r1, r22
 6da:	17 06       	cpc	r1, r23
 6dc:	18 06       	cpc	r1, r24
 6de:	09 06       	cpc	r0, r25
 6e0:	08 95       	ret

000006e2 <__fp_pscB>:
 6e2:	00 24       	eor	r0, r0
 6e4:	0a 94       	dec	r0
 6e6:	12 16       	cp	r1, r18
 6e8:	13 06       	cpc	r1, r19
 6ea:	14 06       	cpc	r1, r20
 6ec:	05 06       	cpc	r0, r21
 6ee:	08 95       	ret

000006f0 <__fp_round>:
 6f0:	09 2e       	mov	r0, r25
 6f2:	03 94       	inc	r0
 6f4:	00 0c       	add	r0, r0
 6f6:	11 f4       	brne	.+4      	; 0x6fc <__fp_round+0xc>
 6f8:	88 23       	and	r24, r24
 6fa:	52 f0       	brmi	.+20     	; 0x710 <__fp_round+0x20>
 6fc:	bb 0f       	add	r27, r27
 6fe:	40 f4       	brcc	.+16     	; 0x710 <__fp_round+0x20>
 700:	bf 2b       	or	r27, r31
 702:	11 f4       	brne	.+4      	; 0x708 <__fp_round+0x18>
 704:	60 ff       	sbrs	r22, 0
 706:	04 c0       	rjmp	.+8      	; 0x710 <__fp_round+0x20>
 708:	6f 5f       	subi	r22, 0xFF	; 255
 70a:	7f 4f       	sbci	r23, 0xFF	; 255
 70c:	8f 4f       	sbci	r24, 0xFF	; 255
 70e:	9f 4f       	sbci	r25, 0xFF	; 255
 710:	08 95       	ret

00000712 <_exit>:
 712:	f8 94       	cli

00000714 <__stop_program>:
 714:	ff cf       	rjmp	.-2      	; 0x714 <__stop_program>
